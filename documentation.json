{
    "pipes": [],
    "interfaces": [
        {
            "name": "Authcredential",
            "id": "interface-Authcredential-fde984abe4f5312422cff2abb1a2b75af6ae7039d8b1be7e6baad9500d69fde5510c26bb7a2f8210752ba1c6bb41e288639e91bcfbb1a0ad82b969646c29a855",
            "file": "src/app/core/auth/authcredential.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Authcredential {\n  email: string;\n  password: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AuthResponse",
            "id": "interface-AuthResponse-ce1ba8db088a30be8479dce6c8ad3e890f0b6b902d06cfd6808f39ff66a445ff5884aa6a4e78ebf6e3c0395599cd7488fccd998568f0d34409ef4c8fdbd8d503",
            "file": "src/app/core/auth/auth-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AuthResponse {\n  token: string;\n}\n",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreateGame",
            "id": "interface-CreateGame-a09046950a9feab27ed87eb12a7e37b7bd82b070f9c58c37277dbb4277f4efaa158324d42bc9301611f5df8283eb9fb6199aed8480474df29e1e7aa06cbf9eb8",
            "file": "src/app/core/models/game.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Game {\n  token: string\n  name: string,\n  rules: string\n}\n\nexport interface CreateGame {\n  name: string,\n  rules: string\n}\n\nexport interface UpdateGame {\n  name: string,\n  rules: string\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "rules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreateMatch",
            "id": "interface-CreateMatch-91371cabcefd3a02503391ca19c26de63dad6113895684c3f957c17bc011a8f82a628a6bde5ae4ad8b71d102aee35731db4cf8a1afcc0ecd6c68c64164d2d822",
            "file": "src/app/core/models/match.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Game} from './game';\nimport {User} from './user';\nimport {Timestamp} from 'rxjs';\n\nexport interface Match {\n  token: string\n  createdOn: string\n  updatedOn: string\n  game: Game\n  users: User[]\n}\n\nexport interface CreateMatch {\n  game: Game\n  users: User[]\n}\n",
            "properties": [
                {
                    "name": "game",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Game",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "users",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Game",
            "id": "interface-Game-a09046950a9feab27ed87eb12a7e37b7bd82b070f9c58c37277dbb4277f4efaa158324d42bc9301611f5df8283eb9fb6199aed8480474df29e1e7aa06cbf9eb8",
            "file": "src/app/core/models/game.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Game {\n  token: string\n  name: string,\n  rules: string\n}\n\nexport interface CreateGame {\n  name: string,\n  rules: string\n}\n\nexport interface UpdateGame {\n  name: string,\n  rules: string\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "rules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Match",
            "id": "interface-Match-91371cabcefd3a02503391ca19c26de63dad6113895684c3f957c17bc011a8f82a628a6bde5ae4ad8b71d102aee35731db4cf8a1afcc0ecd6c68c64164d2d822",
            "file": "src/app/core/models/match.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Game} from './game';\nimport {User} from './user';\nimport {Timestamp} from 'rxjs';\n\nexport interface Match {\n  token: string\n  createdOn: string\n  updatedOn: string\n  game: Game\n  users: User[]\n}\n\nexport interface CreateMatch {\n  game: Game\n  users: User[]\n}\n",
            "properties": [
                {
                    "name": "createdOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "game",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Game",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "updatedOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "users",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Score",
            "id": "interface-Score-0e62eea1478b698afd7ca3cd29e05284ca3dfa8227f3aaddc568eb751b3acad4632df0e22d11023e63f8a524a2f969ce22219b79cb56754fed80c8b90c7b6bc0",
            "file": "src/app/core/models/score.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {User} from './user';\n\nexport interface Score {\n  token: string;\n  user: User;\n  score: number;\n  defaultScore: boolean\n}\n",
            "properties": [
                {
                    "name": "defaultScore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateGame",
            "id": "interface-UpdateGame-a09046950a9feab27ed87eb12a7e37b7bd82b070f9c58c37277dbb4277f4efaa158324d42bc9301611f5df8283eb9fb6199aed8480474df29e1e7aa06cbf9eb8",
            "file": "src/app/core/models/game.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Game {\n  token: string\n  name: string,\n  rules: string\n}\n\nexport interface CreateGame {\n  name: string,\n  rules: string\n}\n\nexport interface UpdateGame {\n  name: string,\n  rules: string\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "rules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-06eed3ec8dfc867e9d842859863b5cb1d50ee811bed280e153e279112cd6a3c5ce9abf048830411d7c0668becbe6935c0ea0243a7b82150ef90c0f509cc202b9-1",
            "file": "src/app/core/models/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  firstname: string;\n  lastname: string;\n  deactivated: boolean;\n  token: string;\n\n}\n",
            "properties": [
                {
                    "name": "deactivated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "firstname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "lastname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-d56d2cca0c6c0cd2505a4e7203bd991a95fcab97962176c3d1f76df9d5ac540e5578440b497686627a46e24ca96efc5802932a3133d303943fd3ec7f2d770957",
            "file": "src/app/core/auth/auth.service.ts",
            "properties": [
                {
                    "name": "accessTokenKey",
                    "defaultValue": "'authToken'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configService",
                    "defaultValue": "inject(ConfigService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "destroyRef",
                    "defaultValue": "inject(DestroyRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "httpClient",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isAuthenticated",
                    "defaultValue": "computed(() => this.state().isAuthenticated)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "loading",
                    "defaultValue": "computed(() => this.state().loading)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "loginUrl",
                    "defaultValue": "'/api/auth/login'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "state",
                    "defaultValue": "signal<AuthenticationState>({\n    token: this.storedTokenBrowser,\n    isAuthenticated: this.storedTokenBrowser !== null,\n    loading: false,\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "storedTokenBrowser",
                    "defaultValue": "localStorage.getItem(this.accessTokenKey)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "token",
                    "defaultValue": "computed(() => this.state().token)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methods": [
                {
                    "name": "isValidJWT",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validateToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {computed, DestroyRef, effect, inject, Injectable, signal} from '@angular/core';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {Router} from '@angular/router';\nimport {ConfigService} from '../config/config.service';\nimport {AuthResponse} from './auth-response';\nimport {takeUntilDestroyed} from '@angular/core/rxjs-interop';\n\ntype AuthenticationState = {\n  token: string | null;\n  isAuthenticated: boolean;\n  loading: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  loginUrl = '/api/auth/login';\n  destroyRef = inject(DestroyRef);\n  configService = inject(ConfigService);\n  httpClient = inject(HttpClient);\n  router = inject(Router);\n\n  private accessTokenKey = 'authToken';\n  private storedTokenBrowser = localStorage.getItem(this.accessTokenKey);\n  private state = signal<AuthenticationState>({\n    token: this.storedTokenBrowser,\n    isAuthenticated: this.storedTokenBrowser !== null,\n    loading: false,\n  });\n\n  token = computed(() => this.state().token);\n  loading = computed(() => this.state().loading);\n  isAuthenticated = computed(() => this.state().isAuthenticated);\n\n  constructor() {\n    effect(() => {\n      const token = this.token();\n      if (token !== null) {\n        localStorage.setItem(this.accessTokenKey, token);\n        this.validateToken(token);\n      } else {\n        localStorage.removeItem(this.accessTokenKey);\n      }\n    });\n\n    if (this.storedTokenBrowser) {\n      this.validateToken(this.storedTokenBrowser);\n    }\n  }\n\n  login(username: string, password: string) {\n    this.state.update((state) => {\n      return {...state, loading: true}\n    });\n    const body = {username, password};\n\n    return this.httpClient.post<AuthResponse>(this.configService.getBackendUrlWithContext(`${this.loginUrl}`), body)\n      .pipe(takeUntilDestroyed(this.destroyRef)\n      ).subscribe({\n        next: (authResponse) => {\n          if (authResponse) {\n            this.state.set({\n              token: authResponse.token,\n              isAuthenticated: true,\n              loading: false\n            });\n          }\n          this.router.navigate([''])\n        },\n        error: () => {\n          this.state.update((state) => {\n            return {...state, loading: false}\n          });\n        }\n      });\n  }\n\n  logout() {\n    this.state.set({\n      token: null,\n      isAuthenticated: false,\n      loading: false\n    });\n  }\n\n  validateToken(token\n                :\n                string\n  ) {\n    if (!this.isValidJWT(token)) {\n      this.state.update((s) => ({...s, isAuthenticated: false}));\n      return;\n    }\n\n    this.httpClient.post<HttpResponse<any>>(\n      this.configService.getBackendUrlWithContext('/api/auth/validate'),\n      {token},\n      {observe: 'response'}\n    ).subscribe({\n      next: (response: HttpResponse<any>) => {\n        this.state.update((s) => ({...s, isAuthenticated: response.status === 200}));\n      },\n      error: () => {\n        this.state.update((s) => ({...s, isAuthenticated: false}));\n      }\n    });\n  }\n\n  isValidJWT(token\n             :\n             string\n  ) {\n    if (!token) return false;\n    const parts = token.split('.');\n    return parts.length === 3;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 34
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CacheStatusService",
            "id": "injectable-CacheStatusService-d94577db98c37d2d5e7cc150b6c7e6b7fa0fe992f33c98bfe800fd12553f24d27acd56cabae9427c862ae4709e90b1070efa199be135aa997515e5101d655787",
            "file": "src/app/core/serviceWorker/cacheStatus.service.ts",
            "properties": [
                {
                    "name": "notificationService",
                    "defaultValue": "inject(NotificationService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "checkCache",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {inject, Injectable, signal} from '@angular/core';\nimport {SwUpdate} from '@angular/service-worker';\nimport {NotificationService} from '../notification/notification.service';\n\n\nconst CACHE_USED_MESSAGE = 'Cached data is being used';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CacheStatusService {\n\n  notificationService = inject(NotificationService);\n\n\n  async checkCache(url: string) {\n    if (\n      await Promise.any((await caches.keys())\n        .map(name => caches.open(name)\n          .then(cache => cache.match(url))))) {\n      this.notificationService.showNotification(CACHE_USED_MESSAGE, 'warning');\n    }\n\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ConfigService",
            "id": "injectable-ConfigService-9ee6b019e9587905224302b40467defcb8f45204c3ff8df62c359f9dd5087872934258a3c27e4e4e8f54348e637f4529a7f3f87aa38849c199b3e50b6e4bf5a5",
            "file": "src/app/core/config/config.service.ts",
            "properties": [
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "getBackendUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getBackendUrlWithContext",
                    "args": [
                        {
                            "name": "context",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {inject, Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {environment} from '../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigService {\n\n  http = inject(HttpClient)\n\n  constructor() { }\n\n\n  private getBackendUrl(): string {\n    return window.location.origin.replace(environment.frontendOriginSegment, environment.backendOriginSegment)\n  }\n\n  getBackendUrlWithContext(context: String) {\n    return this.getBackendUrl() + context.replace(\"/api\", \"/gepardec-gamertrack/api/v1\");\n  }\n\n\n\n}\n\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DateFormatterService",
            "id": "injectable-DateFormatterService-ee2cf46aea2605cb8bb09365b890430a2d5bc7b7638f9893153070f50d1bba2797d4e2428069c50ff5e33df3bc29016d80e4b195f3bf3032e6e2f7c1619579ef",
            "file": "src/app/shared/utility/date-formatter.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "formatDate",
                    "args": [
                        {
                            "name": "dateString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dateString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DateFormatterService {\n\n  constructor() { }\n  formatDate(dateString: string): string {\n    const date = new Date(dateString);\n    const currentDate = new Date();\n\n    const timeDifference = currentDate.getTime() - date.getTime();\n\n    const daysDifference = Math.floor(timeDifference / (1000 * 3600 * 24));\n\n\n    if (daysDifference < 7) {\n      if(daysDifference == 0){\n        return `today`;\n      }else {\n        return `${daysDifference} day${daysDifference > 1 ? 's' : ''} ago`;\n      }\n    } else {\n      return date.toLocaleDateString('en-GB', { weekday: 'short', month: 'numeric', day: 'numeric' });\n    }\n\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "GameService",
            "id": "injectable-GameService-23c91b5cd25067e86c6d2625bbf0896d708de960f51c73e48b60658e9157b092e921073d59b34eca5128b94b54a1b329c029a76e3d1ba813d39f3c17ab9d8ca1",
            "file": "src/app/game/game.service.ts",
            "properties": [
                {
                    "name": "configService",
                    "defaultValue": "inject(ConfigService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "games",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Game[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "url",
                    "defaultValue": "'/api/games'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "createGame",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rules",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Game>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rules",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteGame",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Response>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllGames",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Game[]>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getGameByToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Game>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateGame",
                    "args": [
                        {
                            "name": "updateGame",
                            "type": "UpdateGame",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "updateGame",
                            "type": "UpdateGame",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {inject, Injectable} from '@angular/core';\nimport {CreateGame, Game} from '../core/models/game';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {ConfigService} from \"../core/config/config.service\";\n\nclass UpdateGame {\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GameService {\n\n  url = '/api/games';\n\n  games: Game[] = [];\n\n  private http = inject(HttpClient)\n  private configService = inject(ConfigService)\n\n\n  getAllGames(): Observable<Game[]>{\n    return this.http.get<Game[]>(this.configService.getBackendUrlWithContext(this.url));\n  }\n\n  getGameByToken(token: string): Observable<Game>{\n    return this.http.get<Game>(this.configService.getBackendUrlWithContext(`${this.url}/${token}`));\n  }\n\n  createGame(name: string, rules: string): Observable<Game> {\n    let game: CreateGame = {\n      name: name,\n      rules: rules\n    }\n    return this.http.post<Game>(this.configService.getBackendUrlWithContext(this.url), game);\n  }\n\n  deleteGame(token: string): Observable<Response> {\n    return this.http.delete<Response>(this.configService.getBackendUrlWithContext(`${this.url}/${token}`));\n  }\n\n  updateGame(updateGame: UpdateGame, token:string) {\n    return this.http.put<Game>(this.configService.getBackendUrlWithContext(`${this.url}/${token}`), updateGame)\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LogUpdateService",
            "id": "injectable-LogUpdateService-8567068c6b6a1b49bd7c826ce60ad12663fd84d29fd877c0151f7a1d6a950af169643869fefade169028f608582640693d877eee0b8458e6e28a98cfdb9f47c7",
            "file": "src/app/core/serviceWorker/logUpdate.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {SwUpdate} from '@angular/service-worker';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LogUpdateService {\n\n  constructor(updates: SwUpdate) {\n    updates.versionUpdates.subscribe((evt) => {\n      switch (evt.type) {\n        case 'VERSION_DETECTED':\n\n          break;\n        case 'VERSION_READY':\n\n\n          break;\n        case 'VERSION_INSTALLATION_FAILED':\n\n          break;\n      }\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "updates",
                        "type": "SwUpdate",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "updates",
                        "type": "SwUpdate",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MatchService",
            "id": "injectable-MatchService-3c8b8d6b98b107aac975b0a54e8bbb3a384deceeea8ed60e64161afceef2605ced5327a4d24a2ee893870816e6a94fc10e589f768c30fd5f1269790b19de3e65",
            "file": "src/app/match/match.service.ts",
            "properties": [
                {
                    "name": "configService",
                    "defaultValue": "inject(ConfigService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "url",
                    "defaultValue": "'/api/matches'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "createMatch",
                    "args": [
                        {
                            "name": "match",
                            "type": "CreateMatch",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Match>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "match",
                            "type": "CreateMatch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllMatches",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Match[]>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAllMatchesFromGame",
                    "args": [
                        {
                            "name": "gameToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Match[]>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gameToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLastMatches",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Match[]>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMatchCount",
                    "args": [
                        {
                            "name": "gameToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "gameToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getXAmountOfLastMatches",
                    "args": [
                        {
                            "name": "gameToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Match[]>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gameToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getXAmountOfLastMatchesForUser",
                    "args": [
                        {
                            "name": "gameToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Match[]>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gameToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {inject, Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaderResponse, HttpParams} from '@angular/common/http';\nimport {CreateMatch, Match} from '../core/models/match';\nimport {firstValueFrom, map, Observable} from 'rxjs';\nimport {ConfigService} from '../core/config/config.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MatchService {\n\n  http = inject(HttpClient)\n  configService = inject(ConfigService)\n\n  url = '/api/matches'\n\n\n  createMatch(match: CreateMatch): Observable<Match> {\n\n    return this.http.post<Match>(this.configService.getBackendUrlWithContext(`${this.url}`), match);\n  }\n\n  getAllMatchesFromGame(gameToken: string): Observable<Match[]> {\n    return this.http.get<Match[]>(\n      this.configService.getBackendUrlWithContext(this.url),\n      {params: new HttpParams().set(\"gameToken\", gameToken)});\n  }\n\n  getXAmountOfLastMatches(gameToken: string, amount: number): Observable<Match[]> {\n    return this.http.get<Match[]>(\n      this.configService.getBackendUrlWithContext(this.url),\n      {params: new HttpParams().set(\"gameToken\", gameToken).set(\"pageSize\", amount).set(\"pageNumber\", \"1\")});\n  }\n\n  getXAmountOfLastMatchesForUser(gameToken: string, amount: number, userToken: string): Observable<Match[]> {\n    return this.http.get<Match[]>(\n      this.configService.getBackendUrlWithContext(this.url),\n      {params: new HttpParams().set(\"gameToken\", gameToken).set(\"pageSize\", amount).set(\"pageNumber\", \"1\").set(\"userToken\", userToken)});\n  }\n\n  async getMatchCount(gameToken: string) {\n    return await firstValueFrom(this.http.head<HttpHeaderResponse>(\n      this.configService.getBackendUrlWithContext(this.url), {\n        observe: 'response',\n        params: new HttpParams().set(\"gameToken\", gameToken)\n      })\n      .pipe(\n        map((response) => {\n            return Number(response.headers.get('x-total-count'));\n          }\n        ),\n      ));\n  }\n\n  getAllMatches(): Observable<Match[]> {\n    return this.http.get<Match[]>(\n      this.configService.getBackendUrlWithContext(this.url),\n      {params: new HttpParams()});\n  }\n  getLastMatches(): Observable<Match[]> {\n    return this.http.get<Match[]>(\n      this.configService.getBackendUrlWithContext(this.url),\n      {params: new HttpParams().set(\"pageNumber\", 1).set(\"pageSize\", 15)});\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "NotificationService",
            "id": "injectable-NotificationService-99642ae096228b172eb019f7d13266fb5514eee89ed12a687465a7ca9072e3f885586eb106805e1070e943268222f9b333c5b850b46c58a5d2210a4c36fe7a3d",
            "file": "src/app/core/notification/notification.service.ts",
            "properties": [
                {
                    "name": "notificationSubject",
                    "defaultValue": "new Subject<{ message: string, colorClass: string }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showNotification",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colorClass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colorClass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  private notificationSubject = new Subject<{ message: string, colorClass: string }>();\n\n  constructor() { }\n\n  showNotification(message: string, colorClass: string) {\n    this.notificationSubject.next({ message, colorClass });\n  }\n\n  getNotification() {\n    return this.notificationSubject.asObservable();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PromptUpdate",
            "id": "injectable-PromptUpdate-c0da9fe1baeccf8ef637efcb757c8f5ae531a552d531b8937ae95befdc38d1e89bc629de56eb731e0fd99359df7252cd0ff92ff923fa9facce68c28b4a31f838",
            "file": "src/app/core/serviceWorker/promptUpdate.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {SwUpdate, VersionReadyEvent} from '@angular/service-worker';\nimport {filter, map} from 'rxjs';\n\n  function promptUser(event: VersionReadyEvent): boolean {\n    return window.confirm(`New version available! Load new version?`);\n  }\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PromptUpdate {\n\n  constructor(swUpdate: SwUpdate) {\n    swUpdate.versionUpdates\n      .pipe(filter((evt): evt is VersionReadyEvent => evt.type === 'VERSION_READY'))\n      .subscribe((evt) => {\n        if (promptUser(evt)) {\n          // Reload the page to update to the latest version.\n          document.location.reload();\n        }\n      });\n\n    const updatesAvailable = swUpdate.versionUpdates.pipe(\n      filter((evt): evt is VersionReadyEvent => evt.type === 'VERSION_READY'),\n      map((evt) => ({\n      type: 'UPDATE_AVAILABLE',\n      current: evt.currentVersion,\n      available: evt.latestVersion,\n    })),\n  );\n  }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "swUpdate",
                        "type": "SwUpdate",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "swUpdate",
                        "type": "SwUpdate",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RankListService",
            "id": "injectable-RankListService-191287c0c8009b52d372c915e1ff0a3726e7dea711f214eb038d3a69ebfc313bc219080cd77bc66b2eda76fe4d78eaec4c4a0026fcdc8fd880907cfa1711e0b1",
            "file": "src/app/rank-list/rank-list.service.ts",
            "properties": [
                {
                    "name": "configService",
                    "defaultValue": "inject(ConfigService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "url",
                    "defaultValue": "'/api/ranklist'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "getTopScoresByGame",
                    "args": [
                        {
                            "name": "gameToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scoreCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Score[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gameToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scoreCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {inject, Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport { Observable } from 'rxjs';\nimport {Score} from '../core/models/score';\nimport {ConfigService} from '../core/config/config.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RankListService {\n  url ='/api/ranklist'\n  configService = inject(ConfigService)\n  constructor(private httpClient: HttpClient) { }\n\n  getTopScoresByGame(gameToken: string, scoreCount: number): Observable<Score[]> {\n\n    return this.httpClient.get<Score[]>(this.configService.getBackendUrlWithContext(`${this.url}/${gameToken}?top=${scoreCount}`));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-bab4a4e78b939668274b4e17665dc552f14348fc0cc978fa724ebefe9de24b8da8558951851f3522c636e89a379d8237b48cbf3b7dd9533755d1e18670cd3276",
            "file": "src/app/user/user.service.ts",
            "properties": [
                {
                    "name": "url",
                    "defaultValue": "'/api/users'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "createUser",
                    "args": [
                        {
                            "name": "firstname",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastname",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "firstname",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastname",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteUser",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllActivatedUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAllUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<User[]>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserBytoken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "firstname",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastname",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "deactivated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "firstname",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastname",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "deactivated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {User} from '../core/models/user';\nimport {HttpClient, HttpParams} from \"@angular/common/http\";\nimport {Observable} from 'rxjs';\nimport {Router} from '@angular/router';\nimport {ConfigService} from '../core/config/config.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  url = '/api/users'\n\n  constructor(private httpClient: HttpClient, private router: Router, private configService: ConfigService) {\n  }\n\n  getAllUsers(): Observable<User[]> {\n    return this.httpClient.get<User[]>(this.configService.getBackendUrlWithContext(`${this.url}`));\n  }\n\n  getAllActivatedUsers() {\n    return this.httpClient.get<User[]>(this.configService.getBackendUrlWithContext(`${this.url}`), {params: new HttpParams().set('includeDeactivated', false)})\n  }\n\n  getUserBytoken(token: string): Observable<User> {\n\n    return this.httpClient.get<User>(this.configService.getBackendUrlWithContext(`${this.url}/${token}`));\n  }\n\n  createUser(firstname: string, lastname: string) {\n    const body = {firstname, lastname};\n\n    this.httpClient.post(this.configService.getBackendUrlWithContext(`${this.url}`), body)\n      .subscribe(() => this.router.navigate(['users']));\n  }\n\n  deleteUser(token: string) {\n    this.httpClient.delete(this.configService.getBackendUrlWithContext(`${this.url}/${token}`)).subscribe({\n      next: () => {\n        this.router.navigate(['users']);\n      },\n      error: () => {\n        this.router.navigate(['users']);\n      }});\n  }\n\n    updateUser(token\n  :\n    string, firstname\n  :\n    string, lastname\n  :\n    string, deactivated\n  :\n    boolean\n  )\n    {\n      const body = {firstname, lastname, deactivated};\n\n      this.httpClient.put(this.configService.getBackendUrlWithContext(`${this.url}/${token}`), body).subscribe(() => {\n\n          this.router.navigate(['users']);\n        }\n      );\n\n    }\n\n  }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-2728108ae0a04c7e591474469163745244c00b5b00a857fdd9a747f3b68c8e0b6a566c5d7281c0e4030a9b92a90afe1835320301910bcfbdeca743023ce60c15",
            "file": "src/app/core/auth/auth.guard.ts",
            "properties": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "canActivateChild",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {CanActivate, CanActivateChild, CanActivateFn, Router} from '@angular/router';\nimport {inject, Injectable} from '@angular/core';\nimport {AuthService} from './auth.service';\n\n@Injectable(\n  {\n    providedIn: 'root'\n  }\n)\nexport class AuthGuard implements CanActivate, CanActivateChild {\n\n  authService = inject(AuthService);\n  router = inject(Router);\n\n\n  canActivate(): boolean {\n    return this.isAuthenticated();\n  }\n\n  canActivateChild(): boolean {\n    return this.isAuthenticated();\n  }\n\n\n  private isAuthenticated() {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n",
            "extends": [],
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "UpdateGame",
            "id": "class-UpdateGame-23c91b5cd25067e86c6d2625bbf0896d708de960f51c73e48b60658e9157b092e921073d59b34eca5128b94b54a1b329c029a76e3d1ba813d39f3c17ab9d8ca1",
            "file": "src/app/game/game.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {inject, Injectable} from '@angular/core';\nimport {CreateGame, Game} from '../core/models/game';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {ConfigService} from \"../core/config/config.service\";\n\nclass UpdateGame {\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GameService {\n\n  url = '/api/games';\n\n  games: Game[] = [];\n\n  private http = inject(HttpClient)\n  private configService = inject(ConfigService)\n\n\n  getAllGames(): Observable<Game[]>{\n    return this.http.get<Game[]>(this.configService.getBackendUrlWithContext(this.url));\n  }\n\n  getGameByToken(token: string): Observable<Game>{\n    return this.http.get<Game>(this.configService.getBackendUrlWithContext(`${this.url}/${token}`));\n  }\n\n  createGame(name: string, rules: string): Observable<Game> {\n    let game: CreateGame = {\n      name: name,\n      rules: rules\n    }\n    return this.http.post<Game>(this.configService.getBackendUrlWithContext(this.url), game);\n  }\n\n  deleteGame(token: string): Observable<Response> {\n    return this.http.delete<Response>(this.configService.getBackendUrlWithContext(`${this.url}/${token}`));\n  }\n\n  updateGame(updateGame: UpdateGame, token:string) {\n    return this.http.put<Game>(this.configService.getBackendUrlWithContext(`${this.url}/${token}`), updateGame)\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d1bdd16b6a7fdca7c79299a0efac4a49750e80f144370162968d323c1f12b1214823d14621955aabfec3d55b508cbf843aafbee8ba02f51a40e62144a349cba9",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "title",
                    "defaultValue": "'gepardec-gamertrack-frontend'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "isAuthorized",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isNewMatchRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "HomeHeaderComponent",
                    "type": "component"
                },
                {
                    "name": "NotificationComponent",
                    "type": "component"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, inject} from '@angular/core';\nimport {Router, RouterOutlet} from '@angular/router';\nimport {UserListComponent} from './user/ui/user-list/user-list.component';\nimport {RouterModule} from '@angular/router';\nimport {HomeHeaderComponent} from './core/ui/home-header/home-header.component';\nimport {NotificationComponent} from './core/ui/notification/notification.component';\nimport {NgIf} from '@angular/common';\nimport {AuthService} from './core/auth/auth.service';\n\n@Component({\n  selector: 'app-root',\n  imports: [RouterOutlet, RouterModule, HomeHeaderComponent, NotificationComponent, NgIf],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css'\n})\nexport class AppComponent {\n  title = 'gepardec-gamertrack-frontend';\n\n  authService = inject(AuthService);\n\n  constructor(private router: Router) {}\n\n  isNewMatchRoute(): boolean {\n    return this.router.url.includes('/new');\n  }\n  isAuthorized() {\n    return this.authService.isAuthenticated();\n  }\n}\n",
            "styleUrl": "./app.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * The content below * * * * * * * * * * * -->\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->\n<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * Delete the template below * * * * * * * * * -->\n<!-- * * * * * * * to get started with your project! * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n\n\n\n<main class=\"main\">\n  <div class=\"header-container\">\n    <app-home-header></app-home-header>\n  </div>\n\n  <div class=\"content\">\n    <app-notification></app-notification>\n    <router-outlet></router-outlet>\n    @if (isAuthorized()) {\n    <button *ngIf=\"!isNewMatchRoute() \"class=\"fixed-button\" routerLink=\"/matches/new\">\n      +\n    </button>\n      }\n  </div>\n</main>\n\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * The content above * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * * -->\n<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * End of Placeholder  * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "CreateUserComponent",
            "id": "component-CreateUserComponent-0cbf04314ea06263e3261d2e2edc9c728c0fa2b06b7dd3279af2eed24de60d82ad278a18384377868305cccc49e493dc95edd5bf2907ee060e76a035b41a87e8",
            "file": "src/app/user/ui/create-user/create-user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-user",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./create-user.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "firstname",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "lastname",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "userService",
                    "defaultValue": "inject(UserService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "submitCreateUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, inject} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {RouterModule} from '@angular/router';\nimport {NgIf} from '@angular/common';\nimport {UserService} from '../../user.service';\n\n@Component({\n  selector: 'app-create-user',\n  imports: [ReactiveFormsModule, RouterModule, FormsModule, NgIf],\n  templateUrl: './create-user.component.html',\n  styleUrl: './create-user.component.css'\n})\nexport class CreateUserComponent {\n  firstname: string = '';\n  lastname: string = '';\n\n  userService = inject(UserService);\n\n  submitCreateUser(): void{\n    if (this.firstname && this.lastname) {\n      this.userService.createUser(this.firstname ?? '', this.lastname ?? '')\n    }\n  }\n}\n",
            "styleUrl": "./create-user.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<section class=\"form-container\">\n  <div class=\"create-card\">\n    <h1 class=\"form-title\">Create new User</h1>\n\n    <form (ngSubmit)=\"submitCreateUser()\" class=\"user-form\" #createForm=\"ngForm\">\n\n      <div class=\"user-info\">\n        <div class=\"info-row\">\n          <div class=\"info-label\">Firstname:</div>\n          <div class=\"info-value\">\n            <input\n              id=\"firstname\" type=\"text\"\n              class=\"input-field\"\n              placeholder=\"Enter Firstname\"\n              name=\"firstname\"\n              [(ngModel)]=\"firstname\"\n              required\n              #firstnameInput=\"ngModel\"\n            />\n            <div class=\"error-container\">\n              <div *ngIf=\"firstnameInput.invalid && firstnameInput.touched\" class=\"error\">\n                  Firstname is required.\n                </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"info-row\">\n          <div class=\"info-label\">Lastname:</div>\n          <div class=\"info-value\">\n            <input\n              id=\"lastname\" type=\"text\"\n              class=\"input-field\"\n              placeholder=\"Enter Lastname\"\n              name=\"lastname\"\n              [(ngModel)]=\"lastname\"\n              required\n              #lastnameInput=\"ngModel\"\n            />\n            <div class=\"error-container\">\n              <div *ngIf=\"lastnameInput.invalid && lastnameInput.touched\" class=\"error\">\n                Lastname is required.\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-actions\">\n          <button class=\"btn back-btn\" routerLink=\"/users\">Back</button>\n          <button type=\"submit\" class=\"btn create-btn\" [disabled]=\"createForm.invalid\" >Create</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</section>\n\n"
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-54454b29465963b8121f4c5e73edc7697d2f0531a79e55af05fec7c2eca941816709db3725ce84a3cb48f0ededc0082bf473966b09607e37c3c53a67a6c51967",
            "file": "src/app/shared/ui/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "confirmButtonDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "openDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onConfirmation",
                    "defaultValue": "new EventEmitter<Boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'app-dialog',\n  imports: [],\n  templateUrl: './dialog.component.html',\n  styleUrl: './dialog.component.css'\n})\nexport class DialogComponent {\n\n  @Input() openDialog?: boolean;\n  @Input() confirmButtonDisabled?: boolean;\n\n  @Output() onConfirmation = new EventEmitter<Boolean>();\n\n\n  closeDialog() {\n    this.onConfirmation.emit(false)\n    this.openDialog = false;\n  }\n}\n",
            "styleUrl": "./dialog.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "  <dialog [open]=\"openDialog\" class=\"dialog-container\">\n    <section class=\"dialog-body\">\n      <ng-content></ng-content>\n    </section>\n    <div class=\"dialog-button-container\">\n      <button type=\"submit\" [disabled]=\"confirmButtonDisabled\" (click)=\"onConfirmation.emit(true); closeDialog()\"> Confirm </button>\n      <button type=\"button\" (click)=\"closeDialog(); closeDialog()\"> Cancel </button>\n    </div>\n  </dialog>\n"
        },
        {
            "name": "GameCardComponent",
            "id": "component-GameCardComponent-9e861f26434fe023109ad58d8371a17a0746b342e638e93571a6aa40ed7d8a8787872f5a88d19635eeb05939ca8db243f4509418aa3e425d4e251e883e45e7dd",
            "file": "src/app/game/ui/game-card/game-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-game-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./game-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "game",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Game",
                    "decorators": []
                },
                {
                    "name": "isSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "Boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCardClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "EventEmitter",
                    "defaultValue": "EventEmitter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {Game} from '../../../core/models/game';\nimport {NgIf} from '@angular/common';\n\n@Component({\n  selector: 'app-game-card',\n  imports: [\n    NgIf\n  ],\n  templateUrl: './game-card.component.html',\n  styleUrl: './game-card.component.css'\n})\nexport class GameCardComponent {\n  @Input() game!: Game;\n  @Input() isSelected?: Boolean;\n  @Output() onCardClick = new EventEmitter<any>();\n\n\n  protected readonly EventEmitter = EventEmitter;\n\n  onClick() {\n    this.onCardClick.emit(\"\")\n  }\n}\n",
            "styleUrl": "./game-card.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"card\" (click)=\"onClick()\" [class.selected] = isSelected>\n  <div class=\"card-content\" >\n    <h2 class=\"card-title\">{{ game.name }}</h2>\n    <p *ngIf=\"game.rules && game.rules.trim() !== ''\" class=\"card-description\"> {{ game.rules }} </p>\n  </div>\n</div>\n"
        },
        {
            "name": "GameComponent",
            "id": "component-GameComponent-e5abcd4e039911addb318383e3550901e916b402ed8bf470b99ae491353484535999cfef74cfcb4e9a8236eedd46af6822dbe2cd39e90f47bb17d880219ad268",
            "file": "src/app/game/game.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-game",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./game.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "gameList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Game[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "gameService",
                    "defaultValue": "inject(GameService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "createGame",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAuthorized",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openGame",
                    "args": [
                        {
                            "name": "token",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "GameListComponent",
                    "type": "component"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, inject, OnInit} from '@angular/core';\nimport {GameService} from './game.service';\nimport {Game} from '../core/models/game';\nimport {NgIf} from '@angular/common';\nimport {Router} from '@angular/router';\nimport {GameListComponent} from '../shared/ui/game-list/game-list.component';\nimport {AuthService} from '../core/auth/auth.service';\n\n@Component({\n  selector: 'app-game',\n    imports: [GameListComponent, NgIf],\n  templateUrl: './game.component.html',\n  styleUrl: './game.component.css'\n})\nexport class GameComponent implements OnInit {\n\n  gameList: Game[] = [];\n  gameService: GameService = inject(GameService)\n  router = inject(Router)\n  private authService = inject(AuthService);\n\n\n  ngOnInit() {\n    this.gameService.getAllGames().subscribe((games: Game[]) => {\n      this.gameList = games\n    });\n  }\n\n  createGame() {\n    this.router.navigate([\"/games/new\"]);\n  }\n\n  openGame(token: String) {\n    this.router.navigate([`/games/${token}`]);\n  }\n\n  isAuthorized() {\n    return this.authService.isAuthenticated()\n  }\n\n}\n",
            "styleUrl": "./game.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"game-container\">\n  <div class=\"game-heading\">\n    <h2>Games</h2>\n  </div>\n  <section class=\"game-list\">\n    <app-game-list *ngIf=\"gameList.length > 0\" [gameList]=\"gameList\" (onCardClick)=\"openGame($event.token)\"></app-game-list>\n    <div *ngIf=\"gameList.length === 0\" class=\"no-games-message\">\n      <p>No games available.</p>\n    </div>\n    @if (isAuthorized()) {\n      <button class=\"btn create-btn\" (click)=\"createGame()\" >Create Game</button>\n    }\n  </section>\n</div>\n"
        },
        {
            "name": "GameCreateFormComponent",
            "id": "component-GameCreateFormComponent-279f37f6c39095fd5b5c56c9c726fc6a5f6a96d35d9c224cbfadf6b9809090d6553f73cc7a995314498b2277bf2b5520709748dbf844cd67ecbf7402f282d425",
            "file": "src/app/game/ui/game-create-form/game-create-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-game-create-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./game-create-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "createGameForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "gameService",
                    "defaultValue": "inject(GameService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitNewGame",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, inject, OnInit} from '@angular/core';\nimport {\n  FormControl,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators\n} from '@angular/forms';\nimport {GameService} from '../../game.service';\nimport {NgIf} from '@angular/common';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-game-create-form',\n  imports: [\n    ReactiveFormsModule,\n    NgIf\n  ],\n  templateUrl: './game-create-form.component.html',\n  styleUrl: './game-create-form.component.css'\n})\nexport class GameCreateFormComponent implements OnInit{\n\n  router = inject(Router)\n\n  createGameForm!: FormGroup;\n\n  gameService = inject(GameService)\n\n  ngOnInit() {\n    this.createGameForm = new FormGroup({\n      name: new FormControl('', [\n        Validators.required,\n        Validators.minLength(1),\n        Validators.pattern(\"(.|\\\\s)*\\\\S(.|\\\\s)*\")\n      ]),\n      rules: new FormControl('')\n    });\n  }\n\n\n  submitNewGame() {\n    this.gameService.createGame(\n      this.createGameForm.value.name ?? '',\n      this.createGameForm.value.rules ?? ''\n    ).subscribe({\n      next: (game) => {\n        this.router.navigate([\"/games\", game.token]\n        );\n      },\n    });\n  }\n\n  get name() {\n    return this.createGameForm?.get(\"name\")!;\n  }\n\n}\n",
            "styleUrl": "./game-create-form.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "name": {
                    "name": "name",
                    "getSignature": {
                        "name": "name",
                        "type": "",
                        "returnType": "",
                        "line": 53
                    }
                }
            },
            "templateData": "<section class=\"create-game-form\">\n  <div class=\"create-card\">\n  <h2 class=\"create-game-form-heading\">Create a new Game</h2>\n    <form [formGroup]=\"createGameForm\" (submit)=\"submitNewGame()\">\n      <div class=\"cross-validation\"\n           [class.cross-validation-error]=\"createGameForm.hasError('unambiguousRole') && (createGameForm.touched || createGameForm.dirty)\">\n\n        <div class=\"info-row\">\n          <label class=\"info-label\" for=\"name\">Name</label>\n          <div class=\"info-value\">\n\n            <input class=\"input-field\" placeholder=\"Enter game name\" id=\"name\" type=\"text\" formControlName=\"name\" required/>\n            <div *ngIf=\"name?.invalid && (name?.dirty && name?.touched)\" class=\"error-container\">\n                <div class=\"error\" *ngIf=\"name.hasError('required')\">\n                  A name is required\n                </div>\n                <div class=\"error\" *ngIf=\"name.hasError('minlength')\">\n                  Name must be at least 1 character long\n                </div>\n                <div class=\"error\" *ngIf=\"name.hasError('pattern')\">\n                  Name can't be blank\n                </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"info-row\">\n          <label class=\"info-label\" for=\"rules\">Rules</label>\n          <div class=\"info-value\">\n            <input class=\"input-field\" placeholder=\"Enter game rules\" id=\"rules\" type=\"text\" formControlName=\"rules\"/>\n          </div>\n        </div>\n\n        <div class=\"form-actions \">\n          <button type=\"button\" onClick=\"history.back()\" class=\"btn back-btn\">Back</button>\n          <button [disabled]=\"createGameForm.invalid\" type=\"submit\" class=\"btn create-btn\">Create</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</section>\n"
        },
        {
            "name": "GameDetailComponent",
            "id": "component-GameDetailComponent-b1fbc943a908459d1e46fea7f867d9156bbb361cd716b42aa048e166cfc13fdb14881cbee306ec4421d23364a71c8f6791d9534916e6368c5d852946d64ac1f4",
            "file": "src/app/game/ui/game-detail/game-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-game-details",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./game-detail.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "currentTab",
                    "defaultValue": "'Rules'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "dialogInputIsValid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "game",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Game | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "gameService",
                    "defaultValue": "inject(GameService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "inputText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "matchAmount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "MatchListComponent",
                    "defaultValue": "MatchListComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "matchService",
                    "defaultValue": "inject(MatchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "openWarningDialog",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteGame",
                    "args": [
                        {
                            "name": "game",
                            "type": "Game",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "game",
                            "type": "Game",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editGame",
                    "args": [
                        {
                            "name": "token",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToGamesOverview",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAuthorized",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isDialogInputValid",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatchListComponent",
                    "type": "component"
                },
                {
                    "name": "DialogComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, inject, OnInit} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {GameService} from '../../game.service';\nimport {Game} from '../../../core/models/game';\nimport {DialogComponent} from '../../../shared/ui/dialog/dialog.component';\nimport {MatchService} from '../../../match/match.service';\nimport {FormsModule} from '@angular/forms';\nimport {NgClass, NgIf} from '@angular/common';\nimport {MatchListComponent} from '../match-list/match-list.component';\nimport {AuthService} from '../../../core/auth/auth.service';\n\n@Component({\n  selector: 'app-game-details',\n  imports: [\n    MatchListComponent,\n    DialogComponent,\n    FormsModule,\n    NgClass,\n    NgIf\n  ],\n  templateUrl: './game-detail.component.html',\n  styleUrl: './game-detail.component.css'\n})\nexport class GameDetailComponent implements OnInit{\n\n  activatedRoute = inject(ActivatedRoute);\n  router = inject(Router);\n  gameService = inject(GameService);\n  matchService = inject(MatchService)\n  authService = inject(AuthService);\n  game: Game | undefined\n  openWarningDialog: boolean = false;\n  matchAmount: Number = 0;\n  inputText: string = '';\n  dialogInputIsValid: boolean = false;\n  currentTab: string = 'Rules';\n\n\n  ngOnInit(): void {\n    this.gameService.getGameByToken(this.activatedRoute.snapshot.url[1].path)\n      .subscribe({\n        next: (game) => {\n          this.game = game;\n        },\n      });\n  }\n\n  openDialog() {\n    this.matchService.getMatchCount(this.game?.token!).then(matchAmount => {\n      this.matchAmount = matchAmount;\n    });\n    this.openWarningDialog = true;\n  }\n\n  closeDialog() {\n    this.openWarningDialog = false;\n    this.inputText = '';\n    this.dialogInputIsValid = false\n  }\n\n  deleteGame(game: Game) {\n      this.gameService.deleteGame(game.token).subscribe({\n        next: () => {\n            this.router.navigate([\"/games\"]);\n        },\n      });\n    this.closeDialog()\n  }\n\n  editGame(token: String) {\n    this.router.navigate([\"/games/edit\", token])\n  }\n\n  goToGamesOverview() {\n    this.router.navigate(['/games']);\n  }\n\n  isDialogInputValid() {\n    this.dialogInputIsValid = this.game?.name === this.inputText;\n  }\n\n  changeTab(tab: string) {\n    this.currentTab = tab;\n  }\n\n  protected readonly MatchListComponent = MatchListComponent;\n\n  isAuthorized() {\n    return this.authService.isAuthenticated();\n  }\n}\n",
            "styleUrl": "./game-detail.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"game != undefined\">\n  <div class=\"game-detail-container\">\n    <div class=\"game-detail-card\">\n    <section class=\"game-section\">\n      <div class=\"game-info\">\n        <div class=\"game-name\">{{ game?.name }}</div>\n        <div class=\"tabs\">\n          <button class=\"tablink\" [ngClass]=\"{'active': currentTab === 'Rules'}\" (click)=\"changeTab('Rules')\">Rules</button>\n          <button class=\"tablink\" [ngClass]=\"{'active': currentTab === 'Matches'}\" (click)=\"changeTab('Matches')\">Matches</button>\n        </div>\n      </div>\n      @if (isAuthorized()) {\n          <div class=\"game-actions\">\n              <button class=\"delete-btn\" (click)=\"openDialog()\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                      <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->\n                      <path\n                              d=\"M135.2 17.7L128 32 32 32C14.3 32 0 46.3 0 64S14.3 96 32 96l384 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-96 0-7.2-14.3C307.4 6.8 296.3 0 284.2 0L163.8 0c-12.1 0-23.2 6.8-28.6 17.7zM416 128L32 128 53.2 467c1.6 25.3 22.6 45 47.9 45l245.8 0c25.3 0 46.3-19.7 47.9-45L416 128z\"/>\n                  </svg>\n              </button>\n              <button class=\"edit-button\" (click)=\"editGame(game!.token)\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                      <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->\n                      <path d=\"M471.6 21.7c-21.9-21.9-57.3-21.9-79.2 0L362.3 51.7l97.9 97.9 30.1-30.1c21.9-21.9 21.9-57.3 0-79.2L471.6 21.7zm-299.2 220c-6.1 6.1-10.8 13.6-13.5 21.9l-29.6 88.8c-2.9 8.6-.6 18.1 5.8 24.6s15.9 8.7 24.6 5.8l88.8-29.6c8.2-2.7 15.7-7.4 21.9-13.5L437.7 172.3 339.7 74.3 172.4 241.7zM96 64C43 64 0 107 0 160L0 416c0 53 43 96 96 96l256 0c53 0 96-43 96-96l0-96c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 96c0 17.7-14.3 32-32 32L96 448c-17.7 0-32-14.3-32-32l0-256c0-17.7 14.3-32 32-32l96 0c17.7 0 32-14.3 32-32s-14.3-32-32-32L96 64z\"/>\n                  </svg>\n              </button>\n          </div>\n      }\n    </section>\n    <section>\n        <div *ngIf=\"currentTab === 'Rules'\" class=\"tabcontent\"> {{ game?.rules }}</div>\n        <div *ngIf=\"currentTab === 'Matches'\" class=\"tabcontent\">\n        <app-match-list class=\"matchList\" [game]=\"game\"></app-match-list>\n        </div>\n    </section>\n    </div>\n  </div>\n</div>\n<div *ngIf=\"game == undefined\" class=\"no-game-message\">\n  <p>Game not found.</p>\n</div>\n<div *ngIf=\"openWarningDialog\" class=\"dialog-background\">\n  <app-dialog class=\"warning-dialog\" [confirmButtonDisabled]=\"!dialogInputIsValid\" [openDialog]=\"openWarningDialog\" (onConfirmation)=\"$event && game?.name === this.inputText ? deleteGame(game!) : closeDialog()\">\n    <div class=\"warning-header\">Warning!</div>\n    <div class=\"warning-message\">You are about to&nbsp;<b>delete {{game?.name}}</b>&nbsp;with <b>{{ this.matchAmount}}</b> matches <b class=\"danger\">forever</b>.</div>\n\n    <label for=\"gameName\">Provide the exact game name in order to confirm the action</label>\n    <input [class.disarmed]=\"dialogInputIsValid\" [(ngModel)]=\"this.inputText\" (ngModelChange)=\"isDialogInputValid()\" id=\"gameName\" type=\"text\" placeholder=\"Provide the game name\">\n\n  </app-dialog>\n<button type=\"button\" (click)=\"goToGamesOverview()\" class=\"secondary\">Games Overview</button>\n</div>\n"
        },
        {
            "name": "GameEditFormComponent",
            "id": "component-GameEditFormComponent-5cfb56972b2fc55966aae029062d67909d706583c40f761ea2be6e8678388af6e64da82bf2933de835c0d998ad10cd69d852ab2e954394ff2bec7c5b47a92112",
            "file": "src/app/game/ui/game-edit-form/game-edit-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-game-edit-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./game-edit-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "game",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Game",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "gameService",
                    "defaultValue": "inject(GameService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "updateGameForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitEditedGame",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, inject, OnInit} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {NgIf} from '@angular/common';\nimport {GameService} from '../../game.service';\nimport {Game, UpdateGame} from '../../../core/models/game';\n\n@Component({\n  selector: 'app-game-edit-form',\n  imports: [\n    FormsModule,\n    NgIf,\n    ReactiveFormsModule\n  ],\n  templateUrl: './game-edit-form.component.html',\n  styleUrl: './game-edit-form.component.css'\n})\nexport class GameEditFormComponent implements OnInit{\n\n  activeRoute = inject(ActivatedRoute)\n  gameService = inject(GameService);\n  router = inject(Router)\n  game?: Game;\n  updateGameForm!: FormGroup\n\n  constructor() {\n    this.updateGameForm = new FormGroup({\n      name: new FormControl('', [\n        Validators.required,\n        Validators.minLength(1),\n        Validators.pattern(\"(.|\\\\s)*\\\\S(.|\\\\s)*\")\n      ]),\n      rules: new FormControl(''),\n    });\n  }\n\n  ngOnInit() {\n    let gameToken = this.activeRoute.snapshot.url[2].path\n\n    this.gameService.getGameByToken(gameToken).subscribe({\n      next: (game) => {\n        if (game)\n          this.game = game;\n        this.updateGameForm.patchValue({...this.game})\n      },\n    });\n  }\n\n  submitEditedGame() {\n\n\n    let updateGame: UpdateGame = {...this.updateGameForm.value}\n    this.gameService.updateGame(updateGame, this.game?.token ?? \"\").subscribe({\n      next: (game) => {\n        this.router.navigate([\"/games\", game.token]\n        );\n      },\n    });\n  }\n\n    get\n    name()\n    {\n      return this.updateGameForm?.get(\"name\")!;\n    }\n\n  }\n",
            "styleUrl": "./game-edit-form.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 24
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "name": {
                    "name": "name",
                    "getSignature": {
                        "name": "name",
                        "type": "",
                        "returnType": "",
                        "line": 62
                    }
                }
            },
            "templateData": "<section class=\"game-detail-container\">\n  <div class=\"game-detail-card\">\n    <h1 class=\"game-title\">Update game</h1>\n    <form [formGroup]=\"updateGameForm\" #formDir=\"ngForm\" (submit)=\"submitEditedGame()\">\n      <div class=\"game-info\">\n        <div class=\"info-row\">\n          <div class=\"info-label\">Firstname</div>\n          <div class=\"info-value\">\n            <input class=\"input-field\" id=\"name\" type=\"text\" formControlName=\"name\" required/>\n            <div class=\"error-container\">\n              <div *ngIf=\"name?.invalid && (name?.dirty && name?.touched)\" class=\"alert alert-danger\">\n                <div *ngIf=\"name.hasError('required')\">\n                  A name is required\n                </div>\n                <div *ngIf=\"name.hasError('minlength')\">\n                  Name must be at least 1 character long\n                </div>\n                <div *ngIf=\"name.hasError('pattern')\">\n                  Name can't be blank\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"info-row\">\n          <div class=\"info-label\">Rules</div>\n          <div class=\"info-value\">\n            <input id=\"rules\" class=\"input-field\" type=\"text\" formControlName=\"rules\"/>\n          </div>\n        </div>\n\n        <div class=\"button-group\">\n          <button type=\"button\" onClick=\"history.back()\" class=\"btn back-btn\">Back</button>\n\n          <button [disabled]=\"updateGameForm.invalid || !updateGameForm.touched || !updateGameForm.dirty\" type=\"submit\"\n                  class=\"btn update-btn\">Update Game\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</section>\n\n"
        },
        {
            "name": "GameListComponent",
            "id": "component-GameListComponent-3173ffab6adc94362bd4226d241636deb86a22a7729b4a3b11e6057927c858ccd0cead74373145d2edaaa836ef5c63be36217b3a8c89bb1c465b743225e139e1",
            "file": "src/app/shared/ui/game-list/game-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-game-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./game-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "gameList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Game[]",
                    "decorators": []
                },
                {
                    "name": "selectedGame",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "Game",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCardClick",
                    "defaultValue": "new EventEmitter<Game>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onCardClicked",
                    "args": [
                        {
                            "name": "game",
                            "type": "Game",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "game",
                            "type": "Game",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "GameCardComponent",
                    "type": "component"
                },
                {
                    "name": "NgForOf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {GameCardComponent} from '../../../game/ui/game-card/game-card.component';\nimport {NgForOf} from '@angular/common';\nimport {Game} from '../../../core/models/game';\n\n@Component({\n  selector: 'app-game-list',\n    imports: [\n        GameCardComponent,\n        NgForOf\n    ],\n  templateUrl: './game-list.component.html',\n  styleUrl: './game-list.component.css'\n})\nexport class GameListComponent {\n  @Input() gameList: Game[] = [];\n  @Input() selectedGame?: Game;\n  @Output() onCardClick = new EventEmitter<Game>();\n\n\n  onCardClicked(game: Game) {\n    this.onCardClick.emit(game)\n  }\n}\n",
            "styleUrl": "./game-list.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<section class=\"card-container\">\n  <app-game-card *ngFor=\"let game of gameList\" [game]=\"game\" (onCardClick)=\"onCardClicked(game)\"\n                 [isSelected]=\"game === selectedGame\"></app-game-card>\n</section>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HomeHeaderComponent",
            "id": "component-HomeHeaderComponent-00a99a6d0b5e66950fbe534a87c8701964456606ab667a91784f7c9165a5746bea76e8ddbd7afe824e8e9fc1cbb773eb04b0b6aefa552567ef75d1c73e2f2ec7",
            "file": "src/app/core/ui/home-header/home-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home-header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {RouterLink} from '@angular/router';\n\n@Component({\n  selector: 'app-home-header',\n  imports: [\n    RouterLink\n  ],\n  templateUrl: './home-header.component.html',\n  styleUrl: './home-header.component.css'\n})\nexport class HomeHeaderComponent {\n\n}\n",
            "styleUrl": "./home-header.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<header>\n  <div class=\"logo\" [routerLink]=\"'/'\">\n    <span class=\"logo-first-half\">Gamer</span>\n    <span class=\"logo-second-half\">Track</span>\n  </div>\n  <div class=\"nav-container\">\n    <nav>\n      <li><a href=\"\">Home</a></li>\n      <li><a href=\"/ranklist\">Ranklist</a></li>\n      <li><a href=\"/users\">Users</a></li>\n      <li><a href=\"/games\">Games</a></li>\n    </nav>\n  </div>\n  <div class=\"login-container\">\n    <button class=\"btn\" routerLink=\"/login\">Login</button>\n  </div>\n</header>\n\n\n"
        },
        {
            "name": "HomeScreenComponent",
            "id": "component-HomeScreenComponent-159fffa0ca82c9011702f62cc6d13774ca29fd8889a1a78c897c29d8ea88ff435faa8e60607e7f8be760e8447fe1f2d34ffb935a9ed82994f83429e7279b6bdb",
            "file": "src/app/home-screen/home-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home-screen",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home-screen.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatchHistoryListComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, inject} from '@angular/core';\nimport {RouterLink} from '@angular/router';\nimport {MatchHistoryListComponent} from './ui/match-history-list/match-history-list.component';\nimport {AuthService} from '../core/auth/auth.service';\n\n@Component({\n  selector: 'app-home-screen',\n  imports: [\n    MatchHistoryListComponent\n  ],\n  templateUrl: './home-screen.component.html',\n  styleUrl: './home-screen.component.css'\n})\nexport class HomeScreenComponent {\n  authService = inject(AuthService);\n}\n",
            "styleUrl": "./home-screen.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"home-screen\">\n  <div class=\"match-history-container\">\n    <app-match-history-list></app-match-history-list>\n  </div>\n</div>\n"
        },
        {
            "name": "LoadingScreenComponent",
            "id": "component-LoadingScreenComponent-4f322e700ef2560df2713c99a668666ec2fd0e8f49f3103b283fe21b5d0bb9ee96c9385c799453a892804df3ca1fc5ee9db9abb6a0f4bef6fde30e021c4a8410",
            "file": "src/app/shared/ui/loading-screen/loading-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loading-screen",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./loading-screen.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-loading-screen',\n  imports: [],\n  templateUrl: './loading-screen.component.html',\n  styleUrl: './loading-screen.component.css'\n})\nexport class LoadingScreenComponent {\n\n}\n",
            "styleUrl": "./loading-screen.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!--SOURCE: https://codepen.io/bratzie/pen/dOgXBq -->\n<div class=\"loading-overlay\" id=\"loadingScreen\">\n  <div class=\"loading-container\">\n    <div class=\"loading-text\">Logging in...</div>\n    <div class=\"spinner\"><svg class=\"raquet\" id=\"r-1\">\n      <ellipse class=\"front\" cx=\"44\" cy=\"50\" rx=\"35\" ry=\"50\" />\n      <ellipse class=\"middle\" cx=\"42\" cy=\"50\" rx=\"35\" ry=\"50\" />\n      <ellipse class=\"back\" cx=\"40\" cy=\"50\" rx=\"35\" ry=\"50\" />\n      <rect class=\"handle outer\" x=\"40\" y=\"100\" width=\"10\" height=\"42\" />\n      <rect class=\"handle inner\" x=\"38\" y=\"100\" width=\"10\" height=\"41\" />\n      <rect class=\"handle outer\" x=\"35\" y=\"100\" width=\"10\" height=\"40\" />\n      <ellipse class=\"shadow\" id=\"sor-1\" cx=\"40\" cy=\"50\" rx=\"7\" ry=\"10\" />\n    </svg>\n      <svg class=\"raquet\" id=\"r-2\">\n        <ellipse class=\"back\" cx=\"40\" cy=\"50\" rx=\"35\" ry=\"50\" />\n        <ellipse class=\"middle\" cx=\"42\" cy=\"50\" rx=\"35\" ry=\"50\" />\n        <ellipse class=\"front\" cx=\"44\" cy=\"50\" rx=\"35\" ry=\"50\" />\n        <rect class=\"handle outer\" x=\"35\" y=\"100\" width=\"10\" height=\"42\" />\n        <rect class=\"handle inner\" x=\"37\" y=\"100\" width=\"10\" height=\"41\" />\n        <rect class=\"handle outer\" x=\"40\" y=\"100\" width=\"10\" height=\"40\" />\n        <ellipse class=\"shadow\" id=\"sor-2\" cx=\"44\" cy=\"50\" rx=\"7\" ry=\"10\" />\n      </svg>\n      <div class=\"ball-container\">\n        <svg class=\"ball\">\n          <circle cx=\"20\" cy=\"20\" r=\"12\" />\n        </svg>\n      </div>\n      <svg class=\"shadow\">\n        <ellipse id=\"sr-1\" cx=\"70\" cy=\"30\" rx=\"50\" ry=\"15\"/>\n        <ellipse id=\"sb\" cx=\"150\" cy=\"30\" rx=\"15\" ry=\"4.5\"/>\n        <ellipse id=\"sr-2\" cx=\"230\" cy=\"30\" rx=\"50\" ry=\"15\"/>\n      </svg></div>\n  </div>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-53776f988073848deeb48a4d51dacef404d534dc0d190f9507ae8ae317dd4071cfcb572eaee1132a08bab246c265b15d19a03af4b78c513f76050cf63bdd3f1a",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "password",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "username",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "isAuthorized",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "LoadingScreenComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {NgIf} from '@angular/common';\nimport { AuthService } from '../core/auth/auth.service';\nimport {HttpResponse} from '@angular/common/http';\nimport {LoadingScreenComponent} from '../shared/ui/loading-screen/loading-screen.component';\nimport {RouterLink} from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  imports: [\n    FormsModule,\n    NgIf,\n    LoadingScreenComponent],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.css'\n})\nexport class LoginComponent {\n  username: string = '';\n  password: string = '';\n\n  constructor(private authService: AuthService) {}\n\n\n  onSubmit(): void {\n    if (this.username && this.password) {\n      this.authService.login(this.username, this.password)\n    }\n  }\n\n  onLogout() {\n    this.authService.logout();\n  }\n\n  isAuthorized() {\n    return this.authService.isAuthenticated();\n  }\n\n  isLoading() {\n    return this.authService.loading();\n  }\n}\n",
            "styleUrl": "./login.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<section class=\"form-container\">\n  <div class=\"create-card\">\n    <h1 class=\"form-title\">Login</h1>\n\n    <form (ngSubmit)=\"onSubmit()\" class=\"user-form\" #loginForm=\"ngForm\">\n      <div class=\"user-info\">\n        <div class=\"info-row\">\n          <div class=\"info-label\">Username</div>\n          <div class=\"info-value\">\n            <input\n              type=\"text\"\n              id=\"username\"\n              class=\"input-field\"\n              name=\"username\"\n              [(ngModel)]=\"username\"\n              required\n              #usernameInput=\"ngModel\"\n              placeholder=\"Enter Username\"\n            />\n            <div class=\"error-container\">\n              <div *ngIf=\"usernameInput.invalid && usernameInput.touched\" class=\"error\">\n                Username is required.\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"info-row\">\n          <div class=\"info-label\">Lastname:</div>\n          <div class=\"info-value\">\n            <input\n              type=\"password\"\n              id=\"password\"\n              class=\"input-field\"\n              name=\"password\"\n              [(ngModel)]=\"password\"\n              required\n              #passwordInput=\"ngModel\"\n              placeholder=\"Enter Password\"\n            />\n            <div class=\"error-container\">\n              <div *ngIf=\"passwordInput.invalid && passwordInput.touched\" class=\"error\">\n                Password is required.\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-actions\">\n          <button *ngIf=\"!isAuthorized()\" type=\"submit\" class=\"btn btn-primary\" [disabled]=\"loginForm.invalid\"> Log In\n          </button>\n          <button *ngIf=\"isAuthorized()\" (click)=\"onLogout()\" class=\"btn btn-danger\"> Log Out</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</section>\n\n\n@if (isLoading()) {\n <app-loading-screen></app-loading-screen>\n}\n"
        },
        {
            "name": "MatchCreateComponent",
            "id": "component-MatchCreateComponent-8e9b197f7ea780924d6dcb2558659195104570aa9f38668fa31dad2d702d7a1bc8a51b1bb6abc6809711dad630d8ea9a04228a92397df4bd2539a6d1f9038ab2",
            "file": "src/app/home-screen/ui/match-create/match-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-match-create",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./match-create.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "gameList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Game[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "gameService",
                    "defaultValue": "inject(GameService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "matchService",
                    "defaultValue": "inject(MatchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "openDialog",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "selectedGame",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Game | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "selectedUsers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "throwErrorAlert",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "userList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "userService",
                    "defaultValue": "inject(UserService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createMatch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ifValidCloseAlert",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ifValidOpenDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onGameSelect",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Game",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Game",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUserDeselect",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUserSelect",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "GameListComponent",
                    "type": "component"
                },
                {
                    "name": "NgForOf"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "DialogComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, inject, OnInit} from '@angular/core';\nimport {GameService} from '../../../game/game.service';\nimport {Game} from '../../../core/models/game';\nimport {GameListComponent} from '../../../shared/ui/game-list/game-list.component';\nimport {User} from '../../../core/models/user';\nimport {NgForOf, NgIf} from '@angular/common';\nimport {UserService} from '../../../user/user.service';\nimport {MatchService} from '../../../match/match.service';\nimport {DialogComponent} from '../../../shared/ui/dialog/dialog.component';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-match-create',\n  imports: [\n    GameListComponent,\n    NgForOf,\n    NgIf,\n    DialogComponent\n  ],\n  templateUrl: './match-create.component.html',\n  styleUrl: './match-create.component.css'\n})\nexport class MatchCreateComponent implements OnInit {\n\n\n  gameService = inject(GameService);\n  userService = inject(UserService);\n  matchService = inject(MatchService);\n  router = inject(Router)\n\n  userList: User[] = [];\n  gameList: Game[] = [];\n\n  selectedGame: Game | undefined;\n  selectedUsers: User[] = [];\n\n  openDialog: boolean = false;\n\n  throwErrorAlert?: boolean = false;\n\n\n  ngOnInit() {\n    this.gameService.getAllGames().subscribe(games => this.gameList = games);\n    this.userService.getAllActivatedUsers().subscribe(users => this.userList = users);\n  }\n\n  onGameSelect($event: Game) {\n    this.selectedGame === $event ? this.selectedGame = undefined : this.selectedGame = $event\n  }\n\n  onUserSelect(user: User) {\n    const index = this.selectedUsers.indexOf(user);\n      index > -1 ? this.selectedUsers.splice(index, 1) : this.selectedUsers.push(user)\n  }\n\n  onUserDeselect(user: User) {\n    const index: number = this.selectedUsers?.indexOf(user)\n    if (index > -1) {\n      this.selectedUsers.splice(index, 1)\n    }\n  }\n\n  createMatch() {\n    console.log('creating match')\n    this.closeDialog()\n    this.selectedGame != null && this.selectedUsers.length > 1\n      ? this.matchService.createMatch({game: this.selectedGame, users: this.selectedUsers})\n        .subscribe({\n          next: () => {\n            this.router.navigate([\"/\"])\n          },\n        })\n      : alert(\"No game or users have been selected\");\n  }\n\n  ifValidOpenDialog(): boolean {\n    let isValid= this.selectedGame != undefined && this.selectedUsers.length > 1 ;\n    this.throwErrorAlert = !isValid\n    this.openDialog = isValid;\n    return isValid\n  }\n\n  ifValidCloseAlert() {\n    this.throwErrorAlert = this.selectedGame != undefined && this.selectedUsers.length > 1\n  }\n\n  closeDialog() {\n    this.openDialog = false;\n  }\n\n}\n",
            "styleUrl": "./match-create.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"match-create-container\">\n  <div class=\"creat-match-heading\">\n    <p>Create a Match</p>\n  </div>\n  <div class=\"create-match-form\">\n  <div class=\"select-container\">\n    <div class=\"select-game-container\">\n      <div class=\"select-heading\">\n        <p>Select Game</p>\n      </div>\n      <div *ngIf=\"gameList.length > 0\" class=\"app-game-list\">\n        <app-game-list class=\"game-list\" [selectedGame]=\"selectedGame\" [gameList]=\"gameList\"\n                       (onCardClick)=\"onGameSelect($event)\">\n        </app-game-list>\n      </div>\n      <div *ngIf=\"gameList.length === 0\" class=\"empty-list-message\">\n        <p>No games available.</p>\n      </div>\n    </div>\n    <div class=\"select-user-container\">\n      <div class=\"select-heading\">\n        <p>Select users</p>\n      </div>\n      <div *ngIf=\"userList.length > 0\" class=\"match-user-list-container\">\n        <div class=\"match-user-list\" *ngFor=\"let user of userList\"\n             (click)=\"selectedUsers.includes(user) ? onUserDeselect(user) : onUserSelect(user)\"\n             [class.selected]=\"selectedUsers.includes(user)\">\n          <span class=\"ranking-number\" *ngIf=\"selectedUsers.includes(user)\">\n            {{ selectedUsers.indexOf(user) + 1 }}\n          </span>\n          <span>\n            {{ user.firstname }} {{ user.lastname }}\n          </span>\n        </div>\n      </div>\n      <div *ngIf=\"userList.length === 0\" class=\"empty-list-message\">\n        <p>No users available.</p>\n      </div>\n    </div>\n  </div>\n\n  <button class=\"btn create-btn\" type=\"submit\" (click)=\"ifValidOpenDialog()\">Create Match</button>\n  </div>\n  <div *ngIf=\"openDialog\" class=\"dialog-background\">\n    <app-dialog *ngIf=\"openDialog\" [openDialog]=\"openDialog\"\n                (onConfirmation)=\"$event ? createMatch() : closeDialog()\"\n                class=\"match-app-dialog\">\n      <div class=\"dialog-heading\">\n        Confirm Match for {{ selectedGame?.name }}\n      </div>\n      <div class=\"dialog-user-container\">\n        <div *ngFor=\"let user of selectedUsers; let userRanking = index\">\n          <span>{{ userRanking + 1 }}. {{ user.firstname }} {{ user.lastname }}</span><br>\n        </div>\n      </div>\n    </app-dialog>\n  </div>\n\n  <div class=\"alert\" *ngIf=\"throwErrorAlert\" (click)=\"this.throwErrorAlert = false\">\n    <div class=\"alert-heading\">WARNING!</div>\n    <div  class=\"alert-message\">Select at least one game and two users!</div>\n  </div>\n</div>\n"
        },
        {
            "name": "MatchHistoryListComponent",
            "id": "component-MatchHistoryListComponent-cf792151277685aabb40d569b07bc344a1a7ebe12b09867a7f8564f1d6e697ee85784fc1686dc7749022a7337f1114679f25faddd04cbc0a85e7fa64e1926ff9",
            "file": "src/app/home-screen/ui/match-history-list/match-history-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-match-history-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./match-history-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "dateFormatterService",
                    "defaultValue": "inject(DateFormatterService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "matches",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Match[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "matchService",
                    "defaultValue": "inject(MatchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "isAuthorized",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgForOf"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, inject} from '@angular/core';\nimport {NgForOf, NgIf} from \"@angular/common\";\nimport {Match} from '../../../core/models/match';\nimport {MatchService} from '../../../match/match.service';\nimport {RouterLink} from \"@angular/router\";\nimport {AuthService} from '../../../core/auth/auth.service';\nimport {DateFormatterService} from '../../../shared/utility/date-formatter.service';\n\n@Component({\n  selector: 'app-match-history-list',\n    imports: [\n        NgForOf,\n        NgIf,\n        RouterLink\n    ],\n  templateUrl: './match-history-list.component.html',\n  styleUrl: './match-history-list.component.css'\n})\nexport class MatchHistoryListComponent {\n  matches: Match[] = [];\n\n  matchService = inject(MatchService);\n  authService = inject(AuthService);\n  dateFormatterService = inject(DateFormatterService);\n\n  async ngOnInit() {\n    this.matchService.getLastMatches().subscribe( {\n      next: matches => {\n\n        this.matches = matches;\n      },\n    });\n  }\n\n\n  isAuthorized() {\n    return this.authService.isAuthenticated();\n  }\n}\n",
            "styleUrl": "./match-history-list.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"match-history-container\">\n  <div class=\"match-history-list-heading\">\n    <h2>Recent Matches</h2>\n  </div>\n  <div *ngIf=\"matches.length > 0\" class=\"match-history-list\">\n    <div *ngFor=\"let match of matches;\" class=\"match-history-list-item\">\n      <div class=\"user-details\">\n        <p class=\"match-game\"> {{match.game.name}}:\n          <span><span class=\"match-history-list-item-user\" *ngFor=\"let user of match.users; let i = index\">{{ i + 1 }}. {{ user.firstname }} </span></span>\n        </p>\n      </div>\n      <div class=\"match-createdOn\">{{dateFormatterService.formatDate(match.createdOn)}}</div>\n    </div>\n  </div>\n  <div *ngIf=\"matches.length === 0\" class=\"no-matches-message\">\n    <p>No matches available.</p>\n  </div>\n  @if (isAuthorized()) {\n    <div class=\"create-btn-container\">\n      <button class=\"btn create-btn\" routerLink=\"/matches/new\">Create Match</button>\n    </div>\n  }\n</div>\n"
        },
        {
            "name": "MatchListComponent",
            "id": "component-MatchListComponent-8ec3471462e65f54c3adeb1143e2476cfc22da989518bb0ef012268fb546b7e93b7872b4992ac4305fbfb9de463f38263a53bee48aed57daceee0cd27edbcdda",
            "file": "src/app/game/ui/match-list/match-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-match-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./match-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "game",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "Game | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dateFormatterService",
                    "defaultValue": "inject(DateFormatterService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "matches",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Match[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "matchService",
                    "defaultValue": "inject(MatchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "selectedUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "selectedValue",
                    "defaultValue": "this.valueOptions[0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "throwAlert",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "users",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "userService",
                    "defaultValue": "inject(UserService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "valueOptions",
                    "defaultValue": "[5, 10, 20, 40, 80, 100]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "refreshMatches",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, inject, Input, OnInit} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {MatchService} from '../../../match/match.service';\nimport {Match} from '../../../core/models/match';\nimport {Game} from '../../../core/models/game';\nimport {UserService} from \"../../../user/user.service\";\nimport {User} from \"../../../core/models/user\";\nimport {DateFormatterService} from '../../../shared/utility/date-formatter.service';\n\n@Component({\n  selector: 'app-match-list',\n  imports: [\n    FormsModule\n  ],\n  templateUrl: './match-list.component.html',\n  styleUrl: './match-list.component.css'\n})\nexport class MatchListComponent implements OnInit {\n  valueOptions: number[] = [5, 10, 20, 40, 80, 100];\n  selectedValue: number = this.valueOptions[0];\n  users: User[] = [];\n  selectedUser: User | undefined;\n  throwAlert: boolean = false;\n\n  matchService = inject(MatchService);\n  userService = inject(UserService);\n  dateFormatterService= inject(DateFormatterService);\n\n  matches: Match[] = [];\n  @Input() game: Game | undefined;\n  errorMessage: any;\n\n  async ngOnInit() {\n    this.matchService.getXAmountOfLastMatches(this.game?.token!, this.selectedValue).subscribe({\n      next: (match: Match[]) => {\n        this.matches = match;\n      },\n    });\n    this.userService.getAllUsers().subscribe({\n      next: (users) => {\n        this.users = users;\n      },\n    });\n  }\n\n\n  refreshMatches(value: number) {\n\n    if (this.selectedUser) {\n      this.matchService.getXAmountOfLastMatchesForUser(this.game?.token!, this.selectedValue, this.selectedUser?.token!).subscribe({\n        next: (match: Match[]) => {\n          this.matches = match;\n        },\n      });\n    } else {\n      this.matchService.getXAmountOfLastMatches(this.game?.token!, value).subscribe({\n        next: (match: Match[]) => {\n          this.matches = match;\n        },\n      });\n    }\n  }\n\n    selectValue(value: number) {\n      this.selectedValue = value;\n      this.refreshMatches(value);\n    }\n\n    selectUser(user: User|undefined) {\n        this.selectedUser = user;\n      this.refreshMatches(this.selectedValue);\n    }\n  }\n",
            "styleUrl": "./match-list.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "@if (matches.length > 0 || selectedUser) {\n<div class=\"select-group\">\n    <label class=\"select-label\" for=\"lastmatches\">Amount of past matches: </label>\n    <select class=\"amount-matches\" name=\"lastmatches\" id=\"lastmatches\" [(ngModel)]=\"selectedValue\"\n            (ngModelChange)=\"selectValue(selectedValue)\">\n      @for (number of valueOptions; track number) {\n        <option (select)=\"selectValue(number)\" value=\"{{number}}\">{{ number }}</option>\n      }\n    </select>\n    <label class=\"select-label\" for=\"users\">User: </label>\n    <select name=\"users\" id=\"users\" [(ngModel)]=\"selectedUser\" (change)=\"selectUser(selectedUser!)\">\n      <option (select)=\"selectUser(undefined)\" [ngValue]=\"undefined\">all</option>\n      @for (user of users; track user) {\n        <option (select)=\"selectUser(user)\" [ngValue]=\"user\">{{ user?.firstname }} {{ user?.lastname }}</option>\n      }\n    </select>\n  </div>\n}\n@if (matches.length > 0) {\n\n  <section class=\"grid\">\n    <div class=\"grid-column-header grid-row\">\n      <div> No.</div>\n      <div> Winner</div>\n      <div> Players</div>\n      <div> Date</div>\n\n    </div>\n\n    @for (match of matches; track match.token; let idx = $index) {\n      <div class=\"grid-row\">\n        <div class=\"grid-item\">{{ idx + 1 }}</div>\n        <div class=\"grid-item\">{{ match.users[0].firstname + ' ' + match.users[0].lastname }}</div>\n        <div class=\"grid-item\">\n          @for (user of match.users; track user.token; let idx = $index) {\n            <span>{{ user.firstname + ' ' + user.lastname }}</span>\n          }\n        </div>\n        <div class=\"grid-item\">{{ dateFormatterService.formatDate(match.createdOn) }}</div>\n\n      </div>\n\n    }\n    <div class=\"grid-row\"></div>\n  </section>\n} @else if (selectedUser) {\n  <div class=\"no-matches\">\n    <span>User {{selectedUser!.firstname + \" \" + selectedUser!.lastname}} has not played this game</span>\n  </div>\n}\n\n@else {\n  <div class=\"no-matches\">\n    <span>This game has no played matches</span>\n  </div>\n}\n\n@if (throwAlert) {\n  <div class=\"alert\" (click)=\"this.throwAlert = false\">\n    {{ errorMessage }}\n  </div>\n}\n"
        },
        {
            "name": "NotificationComponent",
            "id": "component-NotificationComponent-be415ca2be77f4a29e28441c43887c01e100e54bc162247b7ac43626899460bef8ee44f8bb86925ad85068d9d8815d6bedd84d25fecc9f08a49e32b226abe9fa",
            "file": "src/app/core/ui/notification/notification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notification",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./notification.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "notificationColorClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "notificationMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "notificationSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {NotificationService} from '../../notification/notification.service';\nimport {NgClass, NgIf} from '@angular/common';\n\n@Component({\n  selector: 'app-notification',\n  imports: [\n    NgIf,\n    NgClass\n  ],\n  templateUrl: './notification.component.html',\n  styleUrl: './notification.component.css'\n})\nexport class NotificationComponent implements OnInit, OnDestroy {\n  notificationMessage: string = '';\n  notificationColorClass: string = '';\n  private notificationSubscription!: Subscription;\n  isVisible = false;\n\n  constructor(private notificationService: NotificationService) { }\n\n  ngOnInit(): void {\n    this.notificationSubscription = this.notificationService.getNotification().subscribe(({ message, colorClass }) => {\n      this.notificationMessage = message;\n      this.notificationColorClass = colorClass;\n      this.isVisible = true;\n\n      setTimeout(() => {\n        this.isVisible = false;\n      }, 5000);\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.notificationSubscription) {\n      this.notificationSubscription.unsubscribe();\n    }\n  }\n\n  closeNotification(): void {\n    this.isVisible = false;\n  }\n}\n",
            "styleUrl": "./notification.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div *ngIf=\"isVisible\" class=\"notification\" [ngClass]=\"notificationColorClass\">\n  <span>{{ notificationMessage }}</span>\n  <button (click)=\"closeNotification()\">X</button>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "RankListComponent",
            "id": "component-RankListComponent-48451caff6011f3f217490781452776315867a2a1a430669af477ec465d0e4300432bee58a5f4ff3cadc3a7043ed28d58758931999bdacfbec9f980ea0d10b65",
            "file": "src/app/rank-list/rank-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-rank-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./rank-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "games",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Game[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "gameService",
                    "defaultValue": "inject(GameService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "rankListService",
                    "defaultValue": "inject(RankListService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "ScoreComponent",
                    "defaultValue": "ScoreComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "scoreCounts",
                    "defaultValue": "[5, 10, 15, 20]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "scores",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Score[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectedGame",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Game | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "selectedScoreCount",
                    "defaultValue": "this.scoreCounts[1]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "filterScores",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgForOf"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, inject, OnInit} from '@angular/core';\nimport {NgClass, NgForOf, NgIf} from '@angular/common';\nimport {RankListService} from './rank-list.service';\nimport {Score} from '../core/models/score';\nimport {ScoreComponent} from './ui/score/score.component';\nimport {FormsModule} from '@angular/forms';\nimport {Game} from \"../core/models/game\";\nimport {GameService} from \"../game/game.service\";\n\n\n@Component({\n  selector: 'app-rank-list',\n  imports: [\n    NgForOf,\n    FormsModule,\n    NgIf,\n    NgClass,\n  ],\n  templateUrl: './rank-list.component.html',\n  styleUrl: './rank-list.component.css'\n})\nexport class RankListComponent implements OnInit{\n  scores: Score[] = [];\n  games: Game[] = [];\n  scoreCounts = [5, 10, 15, 20];\n  selectedGame!: Game | undefined;\n  selectedScoreCount: number = this.scoreCounts[1];\n\n  gameService = inject(GameService);\n  rankListService = inject(RankListService);\n\n  protected readonly ScoreComponent = ScoreComponent;\n\n\n  async ngOnInit() {\n    this.gameService.getAllGames().subscribe({\n      next: games => {\n        if (games.length > 0) {\n          this.games = games;\n          this.selectedGame = games[0]\n          this.filterScores()\n        }\n      },\n    });\n  }\n\n  filterScores() {\n    this.rankListService.getTopScoresByGame(this.selectedGame!.token, this.selectedScoreCount).subscribe( {\n      next: scores => {\n\n        this.scores = scores;\n      },\n    });\n  }\n}\n",
            "styleUrl": "./rank-list.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"rank-list-container\">\n  <div class=\"ranking-heading\">\n    <h2>Rank List {{selectedGame?.name}}</h2>\n  </div>\n  <div class=\"selection-container\">\n    <div class=\"game-selection\">\n      <select class=\"selectionsBox\" id=\"game\" [(ngModel)]=\"selectedGame\" (ngModelChange)=\"filterScores()\">\n        <option value=\"\" disabled selected>Spiel auswählen</option>\n        <option *ngFor=\"let game of games\" [ngValue]=\"game\">{{game.name}}</option>\n      </select>\n    </div>\n\n    <div class=\"score-count-selection\">\n      <select class=\"selectionsBox\" id=\"scoreCount\" [(ngModel)]=\"selectedScoreCount\" (ngModelChange)=\"filterScores()\">\n        <option value=\"\" disabled selected>Top Score</option>\n        <option *ngFor=\"let count of scoreCounts\" [value]=\"count\">{{count}}</option>\n      </select>\n    </div>\n  </div>\n  <div *ngIf=\"scores.length === 0\" class=\"no-scores-message\">\n    <p>No scores available.</p>\n  </div>\n\n  <div *ngIf=\"scores.length > 0\" class=\"ranking-list\">\n\n    <div *ngFor=\"let score of scores; let i = index\" class=\"ranking-item\">\n      <div class=\"rank\">\n        <strong>{{i + 1}}</strong>\n      </div>\n\n      <div class=\"user-details\">\n        <p>{{score.user.firstname}} {{score.user.lastname}}</p>\n      </div>\n      <div class=\"user-details\">\n        {{score.score}}\n      </div>\n      <div class=\"user-details\">\n        <div class=\"default-score\" [ngClass]=\"{'never-played': score.defaultScore, 'played': !score.defaultScore}\">\n          {{ score.defaultScore ? 'default score': '' }}\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ScoreComponent",
            "id": "component-ScoreComponent-f2d1d60aa5c300c3e308cb0f4fe5c0e893d85a1c5dcbd0e80d16e5d1187ebb6d7e7444f3e892d9e79c1b75da1a73a9c960f5a5b710ac1ee8a7c2ab9465e98f86",
            "file": "src/app/rank-list/ui/score/score.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-score",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./score.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Score",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {Score} from '../../../core/models/score';\n\n@Component({\n  selector: 'app-score',\n  imports: [],\n  templateUrl: './score.component.html',\n  styleUrl: './score.component.css'\n})\nexport class ScoreComponent {\n  @Input() score!: Score\n}\n",
            "styleUrl": "./score.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"ranking-list\">\n  <h2>Rangliste</h2>\n\n\n\n    <div class=\"user-details\">\n      <p><strong>Benutzer:</strong> {{score.user.firstname}} {{score.user.lastname}}</p>\n      <p><strong>Score:</strong> {{score.score}}</p>\n    </div>\n\n</div>\n"
        },
        {
            "name": "StatisticsComponent",
            "id": "component-StatisticsComponent-3383baf2e32289fd26f1671f3be58a66041b60870c4e4141b2004fc7f0b162aa535ce159a092d5d67e39e675388a5b6879e6ddc0aceb148611aaf22f351e0b73",
            "file": "src/app/user/ui/statistics/statistics.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-statistics",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./statistics.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chartOptions",
                    "defaultValue": "{\n    scales: {\n      y: {\n        ticks: {\n          stepSize: 1,\n        },\n      beginAtZero: true\n      },\n    }\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartOptions",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "chartType",
                    "defaultValue": "'line'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "data",
                    "defaultValue": "{\n    labels: [],\n    datasets: []\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "matchService",
                    "defaultValue": "inject(MatchService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "route",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "userService",
                    "defaultValue": "inject(UserService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "buildChartDatasets",
                    "args": [
                        {
                            "name": "matchesPerDayByGame",
                            "type": "Record<string | Record<string, number>>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "matchesWonPerDayByGame",
                            "type": "Record<string | Record<string, number>>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "matchesTotalPerDay",
                            "type": "Record<string | number>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "matchesTotalPerDayWon",
                            "type": "Record<string | number>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allDates",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "matchesPerDayByGame",
                            "type": "Record<string | Record<string, number>>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "matchesWonPerDayByGame",
                            "type": "Record<string | Record<string, number>>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "matchesTotalPerDay",
                            "type": "Record<string | number>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "matchesTotalPerDayWon",
                            "type": "Record<string | number>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "allDates",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "buildGameStats",
                    "args": [
                        {
                            "name": "matchesPlayed",
                            "type": "Match[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ matchesPerDayByGame: Record<string, Record<string, number>>; matchesWonPerDayByGame: Record<string, Record<string, number>>; }",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "matchesPlayed",
                            "type": "Match[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateTotalsByDate",
                    "args": [
                        {
                            "name": "byGame",
                            "type": "Record<string | Record<string, number>>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Record<string, number>",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "byGame",
                            "type": "Record<string | Record<string, number>>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllUniqueDates",
                    "args": [
                        {
                            "name": "sources",
                            "type": "Record<string, Record<string, number>>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sources",
                            "type": "Record<string, Record<string, number>>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMatchesPlayedByUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "matches",
                            "type": "Match[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Match[]",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "matches",
                            "type": "Match[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadAndProcessMatches",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sortByDateChronologically",
                    "args": [
                        {
                            "name": "a",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "BaseChartDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectorRef, Component, inject, Input, OnInit} from '@angular/core';\nimport {User} from '../../../core/models/user';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {UserService} from '../../user.service';\nimport {MatchService} from '../../../match/match.service';\nimport {BaseChartDirective} from 'ng2-charts';\nimport {ChartData, ChartOptions, ChartType} from 'chart.js';\nimport {Match} from '../../../core/models/match';\n\n@Component({\n  selector: 'app-statistics',\n  imports: [\n    BaseChartDirective\n  ],\n  templateUrl: './statistics.component.html',\n  styleUrl: './statistics.component.css'\n})\nexport class StatisticsComponent implements OnInit {\n\n  router = inject(Router)\n  route = inject(ActivatedRoute)\n  userService = inject(UserService);\n  matchService = inject(MatchService);\n\n  user?: User;\n  chartType: ChartType = 'line'\n  data: ChartData = {\n    labels: [],\n    datasets: []\n  }\n  chartOptions: ChartOptions = {\n    scales: {\n      y: {\n        ticks: {\n          stepSize: 1,\n        },\n      beginAtZero: true\n      },\n    }\n  }\n\n\n  ngOnInit(): void {\n    let routeExtras = this.router.lastSuccessfulNavigation?.extras.state;\n\n    const userObservable = routeExtras\n      ? Promise.resolve((routeExtras as User[])[0])\n      : this.userService.getUserBytoken(this.route.snapshot.params['token']).toPromise();\n\n    userObservable.then(user => {\n      this.user = user;\n      this.loadAndProcessMatches();\n    }).catch(() => this.router.navigate(['/users']));\n  }\n\n  loadAndProcessMatches() {\n    this.matchService.getAllMatches().subscribe({\n      next: matches => {\n        const matchesPlayed = this.getMatchesPlayedByUser(this.user!, matches)\n        const { matchesPerDayByGame, matchesWonPerDayByGame } = this.buildGameStats(matchesPlayed);\n\n        const matchesTotalPerDay = this.calculateTotalsByDate(matchesPerDayByGame)\n        const matchesTotalPerDayWon = this.calculateTotalsByDate(matchesWonPerDayByGame);\n\n\n        const allDates = this.getAllUniqueDates([matchesPerDayByGame, matchesWonPerDayByGame]);\n\n        const dataSets = this.buildChartDatasets(\n          matchesPerDayByGame,\n          matchesWonPerDayByGame,\n          matchesTotalPerDay,\n          matchesTotalPerDayWon,\n          allDates\n        )\n\n        this.data = {\n          labels: allDates,\n          datasets: dataSets,\n        };\n      },\n      error: () => {\n        this.router.navigate(['/users']);\n      }\n    });\n  }\n\n  sortByDateChronologically(a: string, b: string) {\n    return new Date(a).getTime() - new Date(b).getTime();\n  }\n\n  getMatchesPlayedByUser(user: User, matches: Match[]): Match[] {\n    return matches\n      .filter(match => match.users.some(u => u.token === user.token))\n      .sort((a, b) => this.sortByDateChronologically(a.createdOn, b.createdOn));\n  }\n\n  buildGameStats(matchesPlayed: Match[]) {\n    const matchesPerDayByGame: Record<string, Record<string, number>> = {};\n    const matchesWonPerDayByGame: Record<string, Record<string, number>> = {};\n\n    for (const match of matchesPlayed) {\n      const date = new Date(match.createdOn).toISOString().split('T')[0];\n      const game = match.game?.name || 'Unknown Game';\n      const userIndex = match.users.findIndex(u => u.token === this.user!.token);\n\n      matchesPerDayByGame[game] = matchesPerDayByGame[game] || {};\n      matchesPerDayByGame[game][date] = (matchesPerDayByGame[game][date] || 0) + 1;\n\n      matchesWonPerDayByGame[game] = matchesWonPerDayByGame[game] || {};\n      matchesWonPerDayByGame[game][date] = matchesWonPerDayByGame[game][date] || 0;\n\n      if (userIndex === 0) {\n        matchesWonPerDayByGame[game][date]++;\n      }\n    }\n\n    return { matchesPerDayByGame, matchesWonPerDayByGame}\n  }\n\n  calculateTotalsByDate(byGame: Record<string, Record<string, number>>) {\n    const totals: Record<string, number> = {};\n\n    for (const gameStats of Object.values(byGame)) {\n      for (const [date, count] of Object.entries(gameStats)) {\n        totals[date] = (totals[date] || 0) + count;\n      }\n    }\n\n    return totals;\n  }\n\n  getAllUniqueDates(sources: Record<string, Record<string, number>>[]): string[] {\n    const allDates = new Set<string>();\n\n    for (const stats of sources) {\n      for (const date of Object.values(stats).flatMap(obj => Object.keys(obj))) {\n        allDates.add(date)\n      }\n    }\n\n    return Array.from(allDates).sort((a,b) => this.sortByDateChronologically(a, b));\n  }\n\n  private buildChartDatasets(matchesPerDayByGame: Record<string, Record<string, number>>,\n                             matchesWonPerDayByGame: Record<string, Record<string, number>>,\n                             matchesTotalPerDay: Record<string, number>,\n                             matchesTotalPerDayWon: Record<string, number>,\n                             allDates: string[]): any[] {\n\n    const dataSets = [];\n\n    for (const game of Object.keys(matchesPerDayByGame)) {\n      dataSets.push({\n        label: `${game} Matches Played`,\n        data: allDates.map(date => matchesPerDayByGame[game][date] || 0),\n        hidden: true,\n      });\n\n      dataSets.push({\n        label: `${game} Matches Won`,\n        data: allDates.map(date => matchesWonPerDayByGame[game]?.[date] || 0),\n        hidden: true,\n      });\n    }\n\n    dataSets.push({\n      label: 'Total Matches Played',\n      data: allDates.map(date => matchesTotalPerDay[date] || 0),\n    })\n\n    dataSets.push({\n      label: 'Total Matches Won',\n      data: allDates.map(date => matchesTotalPerDayWon[date] || 0),\n    });\n\n    return dataSets;\n    }\n}\n\n",
            "styleUrl": "./statistics.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"heading\">\n  <h2>{{user?.firstname +\"'s Statistics\"}}</h2>\n</section>\n<section>\n  <canvas baseChart [type]=\"chartType\" [data]=\"data\" [options]=\"chartOptions\">\n  </canvas>\n</section>\n"
        },
        {
            "name": "UpdateUserComponent",
            "id": "component-UpdateUserComponent-988c9efafa927df11f716d2639dc348d0f09f94f85daa23bf14481e1f8236e0fce11828d93b65ab63995f7df6d31d5bc45c6e221d6558602e092d6d1ce13035e",
            "file": "src/app/user/ui/update-user/update-user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-update-user",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./update-user.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "route",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "user",
                    "defaultValue": "{} as User",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "userService",
                    "defaultValue": "inject(UserService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "userToken",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "updateUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterLink"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, inject} from '@angular/core';\nimport {ActivatedRoute, RouterLink} from \"@angular/router\";\nimport {UserService} from '../../user.service';\nimport {User} from '../../../core/models/user';\nimport {FormsModule} from '@angular/forms';\nimport {NgIf} from \"@angular/common\";\n\n@Component({\n  selector: 'app-update-user',\n    imports: [\n        RouterLink,\n        FormsModule,\n        NgIf\n    ],\n  templateUrl: './update-user.component.html',\n  styleUrl: './update-user.component.css'\n})\nexport class UpdateUserComponent {\n  route: ActivatedRoute = inject(ActivatedRoute);\n  userService = inject(UserService);\n  user: User = {} as User;\n  userToken = \"\";\n\n  constructor() {\n    this.userToken = String(this.route.snapshot.params['token']);\n    this.userService.getUserBytoken(this.userToken)\n      .subscribe({\n        next: (user) => {\n\n          this.user = user;\n        },\n      });\n  }\n  updateUser(){\n\n    this.userService.updateUser(this.userToken,this.user.firstname,this.user.lastname,this.user.deactivated);\n  }\n}\n",
            "styleUrl": "./update-user.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "extends": [],
            "templateData": "<section class=\"user-detail-container\">\n  <div class=\"user-detail-card\">\n    <h1 class=\"user-title\">Update User Details</h1>\n    <form (ngSubmit)=\"updateUser()\" #updateUserForm=\"ngForm\">\n      <div class=\"user-info\">\n        <div class=\"info-row\">\n          <div class=\"info-label\">Firstname:</div>\n          <div class=\"info-value\">\n            <input\n              type=\"text\"\n              name=\"firstname\"\n              [(ngModel)]=\"user.firstname\"\n              required\n              class=\"input-field\"\n              placeholder=\"Enter Firstname\"\n              #firstnameInput=\"ngModel\"\n            />\n            <div class=\"error-container\">\n              <div *ngIf=\"firstnameInput.invalid && firstnameInput.touched\" class=\"error\">\n                Firstname is required.\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"info-row\">\n          <div class=\"info-label\">Lastname:</div>\n            <div class=\"info-value\">\n              <input\n                type=\"text\"\n                name=\"lastname\"\n                [(ngModel)]=\"user.lastname\"\n                required\n                class=\"input-field\"\n                placeholder=\"Enter Lastname\"\n                #lastnameInput=\"ngModel\"\n              />\n              <div class=\"error-container\">\n                <div *ngIf=\"lastnameInput.invalid && lastnameInput.touched\" class=\"error\">\n                  Lastname is required.\n                </div>\n              </div>\n            </div>\n        </div>\n\n        <div class=\"info-row\">\n          <div class=\"info-label\">Deactivated:</div>\n          <div class=\"info-value\">\n            <label class=\"switch\">\n              <input\n                type=\"checkbox\"\n                name=\"deactivated\"\n                [(ngModel)]=\"user.deactivated\" />\n              <span class=\"slider\"></span>\n            </label>\n          </div>\n        </div>\n        <div class=\"button-group\">\n          <button class=\"btn back-btn\" [routerLink]=\"['/users/details', user.token]\">Back</button>\n          <button class=\"btn update-btn\" type=\"submit\" [disabled]=\"!updateUserForm.form.valid\">Update</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</section>\n\n"
        },
        {
            "name": "UserComponent",
            "id": "component-UserComponent-f150b469d470f6f6cbf9944daa7f14975f95e3e0c49f573dd9cd773a8251c3658980fdca640f05512911c6db0748a6b95a35e4d25ddb3e5fc852efdcdc77edcd",
            "file": "src/app/user/user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "User",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {User} from '../core/models/user';\nimport {RouterModule} from '@angular/router';\n\n@Component({\n  selector: 'app-user',\n    imports: [RouterModule],\n  templateUrl: './user.component.html',\n  styleUrl: './user.component.css'\n})\nexport class UserComponent {\n  @Input() user!: User\n}\n\n",
            "styleUrl": "./user.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"user-card\" [routerLink]=\"['/users/details', user.token]\">\n\n  <div class=\"user-content\">\n    <div class=\"user-details\">\n      <div class=\"name-status\">\n        {{user.firstname}}\n        {{user.lastname}}\n      </div>\n      <div>\n        <p class=\"status-label\" [class.deactivated]=\"user.deactivated\">{{user.deactivated ? 'Deactivated' : 'Active'}}</p>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "UserDetailsComponent",
            "id": "component-UserDetailsComponent-c32c54973f4c76538eee4d8836d215115fa5f14cc56c065e15cd657c91e1139d243c4f2b2e498448a92bfee516162f6872c3f21aa1fbec31c3a836afffe5fef9",
            "file": "src/app/user/ui/user-details/user-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-details",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-details.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "route",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "userService",
                    "defaultValue": "inject(UserService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "userToken",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteUser",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, inject} from '@angular/core';\nimport {ActivatedRoute, RouterLink} from '@angular/router';\nimport {UserService} from '../../user.service';\nimport {User} from '../../../core/models/user';\n\n@Component({\n  selector: 'app-user-details',\n  imports: [\n    RouterLink\n  ],\n  templateUrl: './user-details.component.html',\n  styleUrl: './user-details.component.css'\n})\nexport class UserDetailsComponent {\n  route: ActivatedRoute = inject(ActivatedRoute);\n  userService = inject(UserService);\n  user: User | undefined;\n  userToken = \"\";\n  constructor() {\n    this.userToken = String(this.route.snapshot.params['token']);\n    this.userService.getUserBytoken(this.userToken)\n      .subscribe({\n        next: (user) => {\n\n          this.user = user;\n        },\n      });\n\n  }\n  deleteUser(token: string){\n    this.userService.deleteUser(token)\n  }\n}\n",
            "styleUrl": "./user-details.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "extends": [],
            "templateData": "<section class=\"user-detail-container\">\n  <div class=\"user-detail-card\">\n    <h1 class=\"user-title\">User Details</h1>\n\n    <div class=\"user-info\">\n      <div class=\"info-row\">\n        <div class=\"info-label\">Firstname:</div>\n        <div class=\"info-value\">{{user?.firstname}}</div>\n      </div>\n      <div class=\"info-row\">\n        <div class=\"info-label\">Lastname:</div>\n        <div class=\"info-value\">{{user?.lastname}}</div>\n      </div>\n      <div class=\"info-row\">\n        <div class=\"info-label\">Deactivated:</div>\n        <div class=\"info-value\" [class.deactivated]=\"user?.deactivated\">{{user?.deactivated ? 'Deactivated' : 'Active'}}</div>\n      </div>\n      <div class=\"button-group\">\n        <button class=\"btn update-btn\" [routerLink]=\"['/users/update', user?.token]\" >Update</button>\n        <button class=\"btn stats-btn\" [routerLink]=\"['/users/stats', user?.token]\" [state]= \"[user]\" >Statistics</button>\n        <button class=\"btn delete-btn\" (click)=\"deleteUser(userToken)\">Delete</button>\n        <button class=\"btn back-btn\" routerLink=\"/users\">Back</button>\n      </div>\n    </div>\n  </div>\n</section>\n\n"
        },
        {
            "name": "UserListComponent",
            "id": "component-UserListComponent-03fc6df1232ae311a4a93309f1aed0f4aeb44438d330c0fbb724c91396ab100041a304f9b38a30dd39dd407ff1279d92298a320339fa258c0061ba44544e489e",
            "file": "src/app/user/ui/user-list/user-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "users",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "User[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "UserComponent",
                    "defaultValue": "UserComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "userService",
                    "defaultValue": "inject(UserService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgForOf"
                },
                {
                    "name": "UserComponent",
                    "type": "component"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, inject} from '@angular/core';\nimport {User} from '../../../core/models/user';\nimport {NgForOf, NgIf} from '@angular/common';\nimport {UserComponent} from '../../user.component';\nimport {UserService} from '../../user.service';\nimport {RouterModule} from '@angular/router';\n\n\n\n@Component({\n  selector: 'app-user-list',\n  imports: [\n    NgForOf,\n    UserComponent,\n    RouterModule,\n    NgIf\n  ],\n  templateUrl: './user-list.component.html',\n  styleUrl: './user-list.component.css'\n})\nexport class UserListComponent {\n  @Input() users: User[] = [];\n  userService: UserService = inject(UserService);\n  protected readonly UserComponent = UserComponent;\n\n  constructor() {\n   this.userService.getAllUsers().subscribe(data => {\n      this.users = data;\n    });\n  }\n}\n",
            "styleUrl": "./user-list.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 24
            },
            "extends": [],
            "templateData": "<div class=\"user-List-container\">\n  <div class=\"user-heading\">\n    <h2>All Users</h2>\n  </div>\n  <div *ngIf=\"users.length > 0\" class=\"userList\">\n    <app-user  *ngFor=\"let user of users\" [user]=\"user\"></app-user>\n  </div>\n  <div *ngIf=\"users.length === 0\" class=\"no-users-message\">\n    <p>No users available.</p>\n  </div>\n  <button class=\"btn create-btn\" [routerLink]=\"['/users/new']\" >Create User</button>\n</div>\n\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideZoneChangeDetection({eventCoalescing: true}),\n    provideRouter(routes),\n    provideHttpClient(withInterceptors([NotificationInterceptor, authInterceptor])),\n    JwtHelperService,\n    {provide: JWT_OPTIONS, useValue: JWT_OPTIONS},\n    NotificationService,\n    provideServiceWorker('ngsw-worker.js', {\n      enabled: !isDevMode(),\n      registrationStrategy: 'registerWhenStable:30000'\n    }),\n    LogUpdateService,\n    CacheStatusService,\n    PromptUpdate,\n    provideCharts({registerables: [LineController, CategoryScale, Legend, Colors, LinearScale, LineElement, PointElement]}),\n  ]\n}"
            },
            {
                "name": "CACHE_USED_MESSAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/serviceWorker/cacheStatus.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Cached data is being used'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  frontendOriginSegment: '',\n  backendOriginSegment: '',\n  serviceWorker: true,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  frontendOriginSegment: 'gamertrack-frontend',\n  backendOriginSegment: 'gamertrack-backend'\n}"
            }
        ],
        "functions": [
            {
                "name": "authInterceptor",
                "file": "src/app/core/auth/auth.interceptor.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "req",
                        "type": "HttpRequest",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "next",
                        "type": "HttpHandlerFn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<HttpEvent<>>",
                "jsdoctags": [
                    {
                        "name": "req",
                        "type": "HttpRequest",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "next",
                        "type": "HttpHandlerFn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "NotificationInterceptor",
                "file": "src/app/core/notification/notification.interceptor.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "req",
                        "type": "HttpRequest",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "next",
                        "type": "HttpHandlerFn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<HttpEvent<>>",
                "jsdoctags": [
                    {
                        "name": "req",
                        "type": "HttpRequest",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "next",
                        "type": "HttpHandlerFn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "promptUser",
                "file": "src/app/core/serviceWorker/promptUpdate.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "event",
                        "type": "VersionReadyEvent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "event",
                        "type": "VersionReadyEvent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AuthenticationState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/auth/auth.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideZoneChangeDetection({eventCoalescing: true}),\n    provideRouter(routes),\n    provideHttpClient(withInterceptors([NotificationInterceptor, authInterceptor])),\n    JwtHelperService,\n    {provide: JWT_OPTIONS, useValue: JWT_OPTIONS},\n    NotificationService,\n    provideServiceWorker('ngsw-worker.js', {\n      enabled: !isDevMode(),\n      registrationStrategy: 'registerWhenStable:30000'\n    }),\n    LogUpdateService,\n    CacheStatusService,\n    PromptUpdate,\n    provideCharts({registerables: [LineController, CategoryScale, Legend, Colors, LinearScale, LineElement, PointElement]}),\n  ]\n}"
                }
            ],
            "src/app/core/serviceWorker/cacheStatus.service.ts": [
                {
                    "name": "CACHE_USED_MESSAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/serviceWorker/cacheStatus.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Cached data is being used'"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  frontendOriginSegment: '',\n  backendOriginSegment: '',\n  serviceWorker: true,\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  frontendOriginSegment: 'gamertrack-frontend',\n  backendOriginSegment: 'gamertrack-backend'\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/core/auth/auth.interceptor.ts": [
                {
                    "name": "authInterceptor",
                    "file": "src/app/core/auth/auth.interceptor.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandlerFn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<HttpEvent<>>",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandlerFn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/notification/notification.interceptor.ts": [
                {
                    "name": "NotificationInterceptor",
                    "file": "src/app/core/notification/notification.interceptor.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandlerFn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<HttpEvent<>>",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandlerFn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/serviceWorker/promptUpdate.ts": [
                {
                    "name": "promptUser",
                    "file": "src/app/core/serviceWorker/promptUpdate.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "event",
                            "type": "VersionReadyEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "VersionReadyEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/core/auth/auth.service.ts": [
                {
                    "name": "AuthenticationState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/auth/auth.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.interceptor.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "authInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "AuthenticationState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/authcredential.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Authcredential",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/config/config.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfigService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/game.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateGame",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/game.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Game",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/game.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateGame",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/match.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateMatch",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/match.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Match",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/score.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Score",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/notification/notification.interceptor.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "NotificationInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/notification/notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/serviceWorker/cacheStatus.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CacheStatusService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/serviceWorker/cacheStatus.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CACHE_USED_MESSAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/serviceWorker/logUpdate.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LogUpdateService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/serviceWorker/promptUpdate.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PromptUpdate",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/serviceWorker/promptUpdate.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "promptUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/ui/home-header/home-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/ui/notification/notification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/game/game.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GameComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/game/game.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateGame",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/game/game.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GameService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/game/ui/game-card/game-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GameCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/game/ui/game-create-form/game-create-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GameCreateFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/game/ui/game-detail/game-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GameDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/game/ui/game-edit-form/game-edit-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GameEditFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/game/ui/match-list/match-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MatchListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/home-screen/home-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/home-screen/ui/match-create/match-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MatchCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/home-screen/ui/match-history-list/match-history-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MatchHistoryListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/match/match.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MatchService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/rank-list/rank-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RankListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/rank-list/rank-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RankListService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/rank-list/ui/score/score.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScoreComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/game-list/game-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GameListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/loading-screen/loading-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utility/date-formatter.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DateFormatterService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/user/ui/create-user/create-user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateUserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/user/ui/statistics/statistics.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatisticsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/user/ui/update-user/update-user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpdateUserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/user/ui/user-details/user-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/user/ui/user-list/user-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/user/user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/user/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}